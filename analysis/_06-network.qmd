# An emerging community of practice? <!-- Results III: network analysis of collaborative communities -->

We constructed and analyzed networks representing users' contributions to GitHub repositories to examine the emergence of collaborative tendencies. We sought to identify clusters of repositories that share common sets of contributors, and the different kinds of contributions that draw the network together.

```{r graph-data, eval=FALSE}
# TODO: refactor some of this as functions?
oarch |>
  drop_na(gh_repo) |>
  unite(tags, c(tag1, tag2, tag3, tag4, tag5)) |>
  select(gh_repo, category, tags, gh_commits, gh_issues, gh_comments) ->
  oarch_graph

oarch_graph <- bind_rows(
  oarch_graph |>
    unnest(gh_commits) |>
    drop_na(author) |> # Apparently real commits, but we can't connect them
    group_by(repo, author) |>
    summarise(category = first(category), tags = first(tags),
              contrib = "commit", n_contrib = n(), .groups = "drop"),
  oarch_graph |>
    unnest(gh_comments) |>
    drop_na(author) |> # Repos with no comments
    group_by(repo, author) |>
    summarise(category = first(category), tags = first(tags),
              contrib = "comment", n_contrib = n(), .groups = "drop"),
  oarch_graph |>
    unnest(gh_issues) |>
    drop_na(author) |> # Repos with no issues
    group_by(repo, author) |>
    summarise(category = first(category), tags = first(tags),
              contrib = "issue", n_contrib = n(), .groups = "drop")
)

# Cleaning
oarch_graph |>
  rename(user = author) |>
  # Remove non-human users
  filter(!str_detect(user, coll("[bot]"))) |>
  filter(!user %in% c("ghost", "codecov-io", "coveralls", "codecov-commenter",
                      "gitter-badger", "dependabot-support")) |>
  # Remove big, non-archaeology projects that flood the network
  filter(!repo %in% c("Stellarium/stellarium", 
                     "opengisch/QField",
                     "lutraconsulting/input")) ->
  oarch_graph
```

We started by constructing a graph connecting users to the repositories that they contributed to, accounting for commits, issues, and comments as distinct kinds of relations.

```{r plot-graph-repo-user, eval=FALSE}
oarch_graph_repo_user <- tbl_graph(nodes_repos_users(oarch_graph),
                                   edges_user_to_repo(oarch_graph))

g_repo_user <- oarch_graph_repo_user |>
  ggraph(layout = "graphopt") +
  geom_edge_fan(aes(colour = contrib, alpha = n_contrib)) +
  geom_node_point(aes(colour = node_type)) +
  scale_edge_alpha(trans = "log")

#g_repo_user
girafe(g_repo_user)
```

We then extracted two one-mode networks from this, one connecting repositories by common users, and the other connecting users by common repositories.

**NOTE:** Combine these figures using patchwork.
**NOTE:** Integrate {r graph-user-user} and {r plot-graph-user-user} into a single cell, similar to how {r plot-graph-repo-repo} integrates both components.

```{r plot-graph-repo-repo, eval=FALSE}
oarch_graph_repo_repo <- tbl_graph(nodes_repos(oarch_graph, category),
                                   edges_common_users(oarch_graph),
                                   directed = FALSE)

oarch_graph_repo_repo |>
  ggraph(layout = "graphopt") +
  geom_edge_link(aes(alpha = n)) +
  geom_node_point(aes(colour = category)) +
  scale_edge_alpha(trans = "log") +
  labs(edge_alpha = "Common contributors")
```

```{r graph-user-user, eval=FALSE}
oarch_graph_user_user <- tbl_graph(
  nodes = nodes_users(oarch_graph), 
  edges = edges_common_repos(oarch_graph),
  directed = FALSE
)
```
```{r plot-graph-user-user, eval=FALSE}
oarch_graph_user_user |>
  mutate(betweenness = centrality_betweenness(weights = n)) ->
  oarch_graph_user_user

oarch_graph_user_user |> 
  ggraph(layout = "graphopt") +
  geom_edge_link(aes(alpha = n)) +
  # geom_node_point() +
  scale_edge_alpha(trans = "log") +
  labs(edge_alpha = "Common repositories")
```

## repo-repo
We applied the edge-betweenness community detection method to identify clusters of repositories that share common sets of contributors of all kinds. Aside from isolate nodes, which represent repositories with only a single contributor, we detected 21 clusters. While many of these clusters are interconnected, some discrete components containing between 2-7 repositories appear as distinct from a primary core.

```{r plot-graph-repo-repo-edge-betweenness, eval=FALSE}
oarch_graph_repo_repo <- tbl_graph(nodes_repos(oarch_graph,category,tags),
                                   edges_common_users(oarch_graph),
                                   directed = FALSE)

oarch_graph_repo_repo |>
  mutate(degree = centrality_degree()) |>
  filter(degree > 1) |>
  mutate(group = as.character(group_edge_betweenness())) ->
  oarch_graph_repo_repo

iplot <- oarch_graph_repo_repo |>
  ggraph(layout = "graphopt") +
  geom_edge_link(aes(alpha = n)) +
  #geom_node_point(aes(colour = group)) +
  #geom_node_text(aes(label = group)) +
  geom_point_interactive(aes(x, y, colour = group, tooltip = repo)) + 
  scale_edge_alpha(trans = "log") +
  labs(edge_alpha = "Common contributors")

girafe(ggobj = iplot)
```

```{r plot-graph-repo-repo-edge-betweenness-dendrogram, eval=FALSE}
oarch_graph_repo_repo <- tbl_graph(nodes_repos(oarch_graph),
                                   edges_common_users(oarch_graph),
                                   directed = TRUE)

oarch_graph_repo_repo |>
  mutate(degree = centrality_degree()) |>
  filter(degree > 1) |>
  mutate(group = as.character(group_edge_betweenness())) ->
  oarch_graph_repo_repo

xx <- igraph::edge.betweenness.community(oarch_graph_repo_repo)
xx <- as.dendrogram(xx)
plot(xx)

ggraph(xx, 'dendrogram', height = height)
```

This graph identifies three core clusters characterized by repositories whose contributors commit to projects other than their own. The clusters that appear along the peiphery largely correspond with the work of single individuals, and sometimes also their colleagues. Peripheral clusters that are connected to core clusters by only a few relationships represent the sole (and perhaps initial) integrations of lone developers into a broader community.

```{r tbl-repo-centrality}
#| tbl-cap: The sixteen most central repositories according to the repositoryâ€“repository network analysis
oarch_graph_repo_repo |>
  mutate(centrality = centrality_betweenness()) |>
  as_tibble() |>
  arrange(-centrality) |>
  slice(1:16) |>
  left_join(oarch, c("repo" = "gh_repo")) |>
  mutate(n_commits = map_int(gh_commits, nrow)) |>
  unite(tags, tag1:tag5, sep = "; ", na.rm = TRUE) |>
  select(repo, centrality, category, tags, n_commits) |>
  gt() |>
  cols_label(
    repo = "Repository", 
    centrality = "Betweenness Centrality",
    category = "Category",
    tags = "Tags",
    n_commits = "Commits"
  )
```

The three core clusters have their own distinct character. One has a focus on archaeogenetics, which consists of a very well established collaborative network and general reliance on data modelling and processing tools. A second cluster is mostly centred on fieldwork-oriented data collection tools, and particularly the emergence of well-funded and well-supported dominant platforms that attract more attention than other independent projects scattered across the network. The third and most significant cluster includes a schmorgasborg of projects whose contributors share varied interests. The emphasis in this latter cluster is on the formation of a central software development community rather than on any specific topic of work. Many of the projects represented in this third cluster emerge from underlying professional partnerships, namely research labs (e.g. ISAA-Kiel) and special interest groups (SSLA).

**NOTE:** What happens to this interpretation when we differentiate commits from issues and comments?

## user-user

We assembled graphs linking users based on common contributions to the same repositories.

**NOTE:** Plot a graph that renders nodes' sizes based on their betweenness centrality.

```{r summary-graph-user-user, eval=FALSE}
oarch_graph_user_user |>
  mutate(degree = centrality_degree(), 
         betweenness = centrality_betweenness(weights = n), 
         strength = centrality_degree(weights = n)) |>
  filter(degree > 0) |> 
  data.frame()
```

We sought to identify whether certain users, who contribute in certain distinct ways, play different roles in overall network. We found that the people with the highest betweenness values are those who primarily produce computational archaeology code as their job. Moreover, we found that these people tend to be employed under precarious circumstances. Although precarious employment is part of our sad reality, in the context of developing and maintaining open source software, this presents a serious source of risk. The people who occupy central positions in these networks are crucial community members that make the network whole, and if they are either unable to continue on in their contributions or decide to leave archaeology entirely, then the overall network would fragment.

**NOTE:** Create a table containing the top 10 users based on betweenness centrality values, with columns specifying theur username, real name, job title/affiliation, location, career stage (student, early/mid/late career, tenured/non-tenured, independent, etc).

We also applied the same betweenness centrality algorithm on a subnetwork whose links are based only on issues and comments, and not code contributions. In this subnetwork, people who commit less code have higher betweenness scores. However, many of the people with high betweenness from the graph representing all contributions also appear here. These people who appear in both of these lists have a tendency to contribute as both committers and as commenters. This list also includes a series of contributors who never or rarely commit code. Although it is out of this study's scope a qualitative analysis of issues and comments may yield more insight on the kinds of contributions that each of these participants make.

**NOTE:** Create a table containing the top 10 users based on betweenness centrality values derived from the issues and comments only subnetwork, with columns specifying theur username, real name, job title/affiliation.

---

**NOTE:** I have no idea what these next two charts depict.

```{r plot-user-betweenness-dist, eval=FALSE}
oarch_graph_user_user |>
  mutate(
    betweenness = centrality_betweenness(weights = n)
  ) |>
  data.frame() |>
  ggplot(aes(x = betweenness)) +
  geom_density(bw = "nrd") +
  scale_x_log10(labels = scales::number)
```

```{r plot-user-betweenness-activity, eval=FALSE}
oarch_graph_user_user |>
  mutate(
    degree = centrality_degree(), 
    betweenness = centrality_betweenness(weights = n), 
    strength = centrality_degree(weights = n)
  ) |>
  as_tibble() |> 
  left_join(oarch_contributors, by = c("user" = "contributor")) |>
  ggplot(aes(betweenness, contribs)) +
  geom_point() +
  scale_x_log10() +
  scale_y_log10() +
  geom_smooth(method = "lm")
```

