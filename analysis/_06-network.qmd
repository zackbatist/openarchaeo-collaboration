# An emerging community of practice?


<!-- Results III: network analysis of collaborative communities

* Are there significant networks? If so, how big and how many?
  * Only one, it seems!

### [Repo-repo] What forms this network?

* Identify the repos/organisations that are the focus of the most intense collaboration?
  * Are they thematically or topically linked?
  * Do they map onto real-world research centres?
* Is the network a new thing, or just a translation of existing offline networks (e.g. fields, institutions) onto GitHub?
  * cf. is open source really open?

### [User-user] Who forms this network?

* What proportion of users and repos are connected to this network?
* What predicts membership in this network?
* Does centrality in the network correlate with general rate of activity?
*  Who are the most central nodes in this network? Is there anything they have in common?
   * High activity?
   * Certain platforms/categories/languages?
* Qualitative analysis of top 50? 100? most connected users
  * Career stage? Precarity? Employer? Location?

-->

```{r data-oarch_contributors}
oarch |>
  unnest(gh_contribs) |>
  drop_na(contributor) |>
  group_by(contributor) |>
  mutate(
    repo_owner = if_else(str_extract(repo, "[^/]+") == contributor, "own", "other")
  ) |>
  group_by(contributor, repo_owner) |>
  summarise(repos = n(), contribs = sum(contributions)) |>
  pivot_wider(c(contributor), names_from = repo_owner, 
              values_from = c(repos, contribs), values_fill = 0) |>
  mutate(
    repos = repos_other + repos_own,
    contribs = contribs_other + contribs_own,
    .after = contributor
  ) ->
  oarch_contributors
```

We constructed and analyzed networks representing users' contributions to GitHub repositories to examine the emergence of collaborative tendencies. We sought to identify clusters of repositories that share common sets of contributors, and the different kinds of contributions that draw the network together.

```{r data-graph}
# TODO: refactor some of this as functions?
oarch |>
  drop_na(gh_repo) |>
  unite(tags, c(tag1, tag2, tag3, tag4, tag5)) |>
  select(gh_repo, category, tags, gh_commits, gh_issues, gh_comments) ->
  oarch_graph

oarch_graph <- bind_rows(
  oarch_graph |>
    unnest(gh_commits) |>
    drop_na(author) |> # Apparently real commits, but we can't connect them
    group_by(repo, author) |>
    summarise(contrib = "commit", n_contrib = n(), .groups = "drop"),
  oarch_graph |>
    unnest(gh_comments) |>
    drop_na(author) |> # Repos with no comments
    group_by(repo, author) |>
    summarise(contrib = "comment", n_contrib = n(), .groups = "drop"),
  oarch_graph |>
    unnest(gh_issues) |>
    drop_na(author) |> # Repos with no issues
    group_by(repo, author) |>
    summarise(contrib = "issue", n_contrib = n(), .groups = "drop")
)

# Cleaning
oarch_graph |>
  rename(user = author) |>
  # Remove non-human users
  filter(!str_detect(user, coll("[bot]"))) |>
  filter(!user %in% c("ghost", "codecov-io", "coveralls", "codecov-commenter",
                      "gitter-badger", "dependabot-support")) |>
  # Remove big, non-archaeology projects that flood the network
  filter(!repo %in% c("Stellarium/stellarium", 
                     "opengisch/QField",
                     "lutraconsulting/input")) ->
  oarch_graph
```

We started by constructing a graph connecting users to the repositories that they contributed to, accounting for commits, issues, and comments as distinct kinds of relations (@fig-graph-repo-user). We then extracted two one-mode networks from this, one connecting repositories by common users, and the other connecting users by common repositories.

```{r extract-graph-repo-user, eval=TRUE}
oarch_graph_repo_user <- tbl_graph(nodes_repos_users(oarch_graph),
                                   edges_user_to_repo(oarch_graph))
```

```{r fig-graph-repo-user, eval=TRUE}
g_repo_user <- oarch_graph_repo_user |>
  ggraph(layout = "graphopt") +
  geom_edge_fan(aes(colour = contrib, alpha = n_contrib)) +
  geom_node_point(aes(colour = node_type)) +
  scale_edge_alpha(trans = "log")

#g_repo_user
girafe(g_repo_user)
```

## repo-repo

We applied the edge-betweenness community detection method (Girvan and Newman 2002) to identify clusters of repositories that share common sets of contributors of all kinds. Aside from isolate nodes (n = XXX, not visible in our visualizations), which represent repositories with only a single contributor, we detected 21 clusters (@fig-graph-repo-repo-edge-betweenness-dendrogram). While many of these clusters are interconnected, some discrete components containing between 2-7 repositories appear as distinct from a primary core.

```{r extract-graph-repo-repo}
oarch_graph_repo_repo <- tbl_graph(nodes_repos(oarch_graph),
                                   edges_common_users(oarch_graph),
                                   directed = FALSE)

oarch_graph_repo_repo |>
  mutate(degree = centrality_degree()) |>
  filter(degree > 1) |>
  mutate(group = as.character(group_edge_betweenness())) ->
  oarch_graph_repo_repo
```

```{r fig-graph-repo-repo-interactive, eval=TRUE}
# Remove the legend.
iplot <- oarch_graph_repo_repo |>
  ggraph(layout = "drl") +
  geom_edge_link(aes(alpha = n)) +
  #geom_node_point(aes(colour = group)) +
  #geom_node_text(aes(label = group)) +
  geom_point_interactive(aes(x, y, colour = group, tooltip = repo)) + 
  scale_edge_alpha(trans = "log") +
  labs(edge_alpha = "Common contributors")

girafe(ggobj = iplot)
```

```{r fig-graph-repo-repo-edge-betweenness-dendrogram, eval=TRUE}
# ZB Note: What we really want out of this is the identification of groups or clusters, as well as the relationships between clusters. In theory, the dendrogram provides the best visualization for this information. I wonder if we can improve it by colour-coding the algorithmically-identified clusters (which should appear side by side), and making the names of the repositories appear vertically aligned perpendicular to the x axis. Additionally, we can colour-code the names of the repositories with their corresponding colours, or indicate that they are part of a cluster using a bracket (like "{" but turned 180 degrees).
oarch_graph_repo_repo <- tbl_graph(nodes_repos(oarch_graph),
                                   edges_common_users(oarch_graph),
                                   directed = TRUE)

oarch_graph_repo_repo |>
  mutate(degree = centrality_degree()) |>
  filter(degree > 1) |>
  mutate(group = as.character(group_edge_betweenness())) ->
  oarch_graph_repo_repo

xx <- igraph::edge.betweenness.community(oarch_graph_repo_repo)
xx <- as.dendrogram(xx)
plot(xx)

ggraph(xx, 'dendrogram', height = height)
```

This graph identifies three core clusters and several peripheral clusters. The core clusters are characterized by repositories whose contributors commit to projects other than their own. The other peripheral clusters largely correspond with the work of single individuals, and sometimes also their close colleagues. Peripheral clusters that are connected to core clusters by only a few relationships represent the sole (or perhaps initial) integration of lone developers into a broader community.

```{r tbl-repo-centrality}
#| tbl-cap: Most central repositories in the repositoryâ€“repository network
oarch_graph_repo_repo |>
  mutate(centrality = centrality_betweenness()) |>
  as_tibble() |>
  arrange(-centrality) |>
  slice(1:10) |>
  left_join(oarch, c("repo" = "gh_repo")) |>
  mutate(n_commits = map_int(gh_commits, nrow)) |>
  unite(tags, tag1:tag5, sep = "; ", na.rm = TRUE) |>
  select(repo, centrality, category, tags, n_commits) |>
  gt() |>
  cols_label(
    repo = "Repository", 
    centrality = "Betweenness Centrality",
    category = "Category",
    tags = "Tags",
    n_commits = "Commits"
  )
```


<!-- TODO: What does tbl-repo-centrality tell us? Can we interrogate it further with a graph?
ZB Response: Not much, I think I conceived it more as a means to an end. If I recall correctly, my intention was to ascertain whether different kinds (categories, mainly) of repositories are more central. One observation is the change in magnitude of betweenness centrality between the two "indexical" entries (open-archaeo and ctv-archaeo) and others in this top 10. Perhaps we can detect and visualize additional abrupt "jumps" in magnitude and identify some pattern relating to other variables. -->

The three core clusters have their own distinct character. One has a focus on archaeogenetics, which consists of a very well established collaborative network and general reliance on data modelling and processing tools. A second cluster is mostly centred on fieldwork-oriented data collection tools, and particularly the emergence of well-funded and well-supported dominant platforms that attract more attention than other independent projects scattered across the network. The third and most significant cluster includes a schmorgasborg of projects whose contributors share varied interests. The emphasis in this latter cluster is on the formation of a central software development community rather than on any specific topic of work. Many of the projects represented in this third cluster emerge from underlying professional partnerships, namely research labs (e.g. ISAA-Kiel) and special interest groups (SSLA).

<!--  What happens to this interpretation when we differentiate commits from issues and comments? -->

## user-user

We assembled graphs linking users based on common contributions to the same repositories. As with the repo-repo network, we excluded isolate nodes (n = xxx), which represent users who only contributed to their own repositories, from the visualization.

```{r graph-user-user}
oarch_graph_user_user <- tbl_graph(
  nodes = nodes_users(oarch_graph), 
  edges = edges_common_repos(oarch_graph),
  directed = FALSE
)

oarch_graph_user_user |>
  mutate(degree = centrality_degree()) |>
  filter(degree > 1) |>
  mutate(centrality = centrality_betweenness(weights = n)) ->
  oarch_graph_user_user
```

We sought to identify whether users who contribute in certain distinct ways play different roles in the overall network. We are reluctant to share personal information about specific users without their informed consent, but based on our knowledge of the community we found that the people with the highest betweenness values are those who primarily produce computational archaeology code as their job. Moreover, we found that these people tend to be employed under precarious circumstances. Although precarious employment is part of our sad reality, in the context of developing and maintaining open source software, this presents a serious source of risk. The people who occupy central positions in these networks are crucial community members that make the network whole, and if they are either unable to continue on in their contributions or decide to leave archaeology entirely, then the overall network would fragment.

---

We also applied the same betweenness centrality algorithm on a subnetwork whose links are based only on issues and comments, and not code contributions. In this subnetwork, people who commit less code have higher betweenness scores. However, many of the people with high betweenness from the graph representing all contributions also appear here. These people who appear in both of these lists have a tendency to contribute as both committers and as commenters. This list also includes a series of contributors who never or rarely commit code. Although it is out of this study's scope a qualitative analysis of issues and comments may yield more insight on the kinds of contributions that each of these participants make.

------------------------------------------------------------------------

<!--ZB Note: What is this? -->

```{r fig-user-betweenness, eval=TRUE}
#| fig-cap: Distribution of betweenness centrality values in the userâ€“user network
oarch_graph_user_user |>
  mutate(
    betweenness = centrality_betweenness(weights = n)
  ) |>
  data.frame() |>
  ggplot(aes(x = betweenness)) +
  geom_density(bw = "nrd") +
  scale_x_log10(labels = scales::number)
```

```{r fig-user-betweenness-activity, eval=TRUE}
#| fig-cap: Correlation between user's centrality (betweenness) in the network and their total number of contributions
oarch_graph_user_user |>
  mutate(
    degree = centrality_degree(), 
    betweenness = centrality_betweenness(weights = n), 
    strength = centrality_degree(weights = n)
  ) |>
  as_tibble() |> 
  left_join(oarch_contributors, by = c("user" = "contributor")) |>
  ggplot(aes(betweenness, contribs)) +
  geom_point() +
  scale_x_log10() +
  scale_y_log10() +
  geom_smooth(method = "lm")
```
