---
title: "openarchaeoCollaboration"
author:
  - name: Zack Batist
    url: https://zackbatist.github.io
    affiliation: University of Toronto
  - name: Joe Roe
    url: https://joeroe.io
    affiliation: University of Copenhagen
date: "`r Sys.Date()`"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(
	echo = FALSE,
	message = FALSE,
	warning = FALSE,
	layout = "l-body-outset"
)
```

```{r dependencies, include=FALSE}
library("tidyverse")
library("lubridate")
library("openarchaeoCollaboration")
library("khroma")
library("gt")
library("fs")
library("here")
library("tidygraph")
library("ggraph")
```

```{r plot-theme}
theme_oarch <- function() theme(
  text = element_text(family = "Lato")
)
```

```{r data-oarch}
read_csv("https://raw.githubusercontent.com/zackbatist/open-archaeo/master/open-archaeo.csv") %>%
  mutate(category = na_if(category, "?")) ->
  oarch

# Extract clean repos from GitHub URLs
oarch %>%
  mutate(
    gh_repo = str_match(oarch$github, "^https://github.com/([\\w-\\.]+/[\\w-\\.]+)/?.*?$")[,2]
  ) ->
  oarch

# Amalgamate categories into fewer rough categories
# TODO: redo
oarch <- mutate(oarch, rough_category = recode(category,
                                 "R" = "Packages (R, Python, etc.)",
                                 "Web apps" = "Standalone apps",
                                 "Datasets" = "Analyses & datasets",
                                 "Tutorials" = "Lists & tutorials",
                                 "Python" = "Packages (R, Python, etc.)",
                                 "Desktop apps" = "Standalone apps",
                                 "QGIS" = "Plugins",
                                 "Lists" = "Lists & tutorials",
                                 "Mobile apps" = "Standalone apps",
                                 "Analyses" = "Analyses & datasets",
                                 "Spreadsheets" = "Forms & spreadsheets",
                                 "Command line tools" = "Standalone apps",
                                 "Plugins" = "Plugins",
                                 "ArcGis" = "Plugins",
                                 "Filemaker" = "Plugins",
                                 "ODK" = "Forms & spreadsheets",
                                 "Lisp" = "Packages (R, Python, etc.)",
                                 .default = "Other",
                                 .missing = "Other"
                                 ))
```

```{r data-github}
# If cached data at `analysis/data/derived_data/oarch.RData` is present, this
# chunk will prefer to load it rather than make requests to the GitHub API.
# Delete this file to fetch fresh data from the GitHub or modify 
# `cached_gh_data` to read a different cached version.
#
# Note that fetching data from the GitHub API takes some time and is subject to
# a rate limit:
# <https://docs.github.com/en/rest/overview/resources-in-the-rest-api#rate-limiting>
#
# You will need to authenticate authenticate with GitHub credentials to get a
# rate limit sufficient to obtain the required data, see 
# <https://gh.r-lib.org/articles/managing-personal-access-tokens.html>
# for options on how to do this.
cached_gh_data <- here("analysis/data/derived_data/oarch.RData")
if (!file_exists(cached_gh_data)) {
  oarch <- mutate(oarch,
                  gh_langs = map(oarch$gh_repo, gh_lang),
                  gh_contribs = map(oarch$gh_repo, gh_contrib),
                  gh_issues = map(oarch$gh_repo, gh_issue),
                  gh_comments = map(oarch$gh_repo, gh_comment),
                  gh_commits = map(oarch$gh_repo, gh_commit)
  )
  saveRDS(oarch, cached_gh_data)
}
oarch <- readRDS(cached_gh_data)
```

## Introduction

In applying either physical or digital methods, archaeology has a long tradition of adopting common or 'off the shelf' tools to serve our own unique purposes, which are not typically unanticipated by their original designers. In other words, the apparatus of archaeology is an open system that relies on products and skillsets from outside the discipline, but which exhibit enough flexibility to be used in novel ways. For example, archaeologists are content to outsource the metallurgical skills needed to forge their trowels, and delegate the manufacture and acquisition of key electronic tools, like laptop computers and cameras, to the global supply chains and labour networks that produce consumer-grade products for purchase. However, an increasingly large number of archaeologists are taking it upon themselves to program their own software, rather than rely on generic and commercially-produced information processing systems. In fact, archaeologists are prolific computer programmers and have been coding a variety of functions and libraries that serve uniquely archaeological problems and purposes.

This article presents a survey of archaeological software development with two goals in mind:

(1) we identify *what* kinds of software archaeologists are making;
(2) and evaluate *how* archaeologists create these tools, with particular emphasis on practices of collaboration.

We examine archaeological software development as reflections of a unique set of cultural practices.

Our investigation considers how archaeological software development may be benefiting from or missing out on the affordances that open source development models-- specifically, the value added through working as part of a broader community of invested stakeholders, processes of iterative improvement, and increased code transparency.

## Background

-   The notion of the archaeological toolbox, and its inclusion of digital tools and skillsets
    -   The use of off-the-shelf tools like MS Access, Excel, Agisoft PhotoScan, Dropbox, etc
    -   Link to related factors:
        -   Lack of experienced programmers among archaeologists
        -   The built-in flexibility of these tools
        -   Ease of administrative purchasing through university departments
    -   What changed?
        -   Software is expensive, shift to subscription models, locking into a dependency on a commercial service provider
        -   Archaeologists are better at computer programming, digital literacy on the rise, digital archaeologists grows into its own legitimate sub-discipline
        -   Open source is cool, everyone has a github profile (even if not really)
            -   (JR:) People are presumably guided towards GitHub (or at least git) via other routes, because it's seen as the standard platform for 'open' digital work. For example, the literature on reproducible compendiums recommends GitHub, and almost all R development work is now done there. And once there, you're sort of forced into engaging in a (particular set of) open source development. I know there's controversy about how dominant this has become and people who say it's not 'true' (free and) open source, and perhaps we could add to that the question of whether it's the right model for archaeology.
-   About open source practices and their influence on archaeology
    -   What is open source software and open source software development?
        -   Free cost as an end-user
        -   Free to manipulate and extend
        -   Community-based support and development
    -   Software as product vs software as collective process
        -   Basically what distinguishes abandonware from thriving software ecosystems
        -   Technical, legal and social notions of open
            -   Technical: source code is open, use of a platform and systems that support software integration and implementations
            -   Legal: open licenses, backing by the courts
            -   Social: inviting community, meaningful contributions provided by users, common vision and values directing the project into future directions
        -   Consider how these aspects of open have been implemented or prioritized by digital archaeologists in different ways
            -   Technical: reproducible research, archiving and publishing
            -   Legal: archiving and publishing, budgeting for projects
            -   Social: ensuring that software is actually useful for general use and not just one-off implementation, coordinating to reduce redundant effort and not reinvent the wheel, writing documentation, making it fit within existing systems or infrastructures (i.e. allocation of credit, citing software directly versus articles that present software, sustainable development after funding runs out, etc)
        -   This paper largely focuses on the social aspect of open, which is arguably the most important for ensuring a positive future for archaeological software development

The 'archaeological toolbox' is a common metaphor that describes the set of physical and informational tools and processes that archaeologists rely upon in their work.

collaborate in their programming work, and how they experience open source development processes which have their own benefits, challenges and organizing principles that may conflict with or relate to means of collaboration and sharing that archaeologists are already generally accustomed to.

## Data and evidence

Our findings here are based on an exploratory analysis of open-archaeo, a list of open source archaeological software and other digital resources. As of right now it includes 408 items, which are nicely rendered at open-archaeo.info.

The main criteria for inclusion is whether a project is identified by its maintainers as relating to archaeological work.

The dataset was compiled by browsing collaborative software development platforms, essentially manually crawling through the profiles of users who identify as archaeologists or who have contributed to tools that pertain to archaeological work.

This quasi-systematic collection strategy is also supplemented by contributions made by interested individuals who identified relevant work that was initially overlooked.

Open-archaeo is a relatively comprehensive list, however it generally lacks code written before the growth and general use of collaborative software development platforms, such as GitHub, among archaeologists, and also lacks references to code that is not available on the web.

It is also limited by the experiences of its primary maintainers, and we welcome anyone, especially domain specialists who are familiar with the kinds of tools commonly used in your field, to contribute.

Please get in touch if you're interested in adding to the list or doing a deep dive relating to your area of expertise!

### Tags and categories

Each record is also annotated with tags that describe the aspects of archaeological work that each tool contributes to.

Items are tagged based on how they have been generally identified or presented by their maintainers.

The list of tags and their associated definitions is subject to grow or change as archaeologists continue to develop software for additional use cases.

Right now there are 63 tags.

Records are also categorized based on how each tool or resource is accessed or used.

This gives us a sense of the pervasiveness of various development models, and the requisite technical capabilities that developers assume users hold.

In other words, categories hint at some of the decisions that developers make regarding how they want their tools to be used and accessed.

| Category                              | Kind      | Scope                                                                                                                                                                                                        |
|:-----------|:-----------|:------------------------------------------------|
| Packages and libraries                | Software  | Sets of functions assembled with clear purpose, and made accessible using standards established by an underlying platform.                                                                                   |
| Standalone software                   | Software  | Software that may be operated without needing to first access an underlying platform.                                                                                                                        |
| Scripts                               | Software  | Sets of pragmatically assembled mutable functions, often lacking complete documentation or adherence to protocols that would otherwise facilitate secondary use outside their original contexts of creation. |
| Specifications, protocols and schemas | Documents | A formal data structure or framework intended to be used as a model.                                                                                                                                         |
| Products                              | Documents | Stable outcomes of creative work.                                                                                                                                                                            |
| Guides                                | Documents | An educational resource or documented protocol meant to instruct readers how to apply relevant tools or techniques.                                                                                          |
| Lists and datasets                    | Documents | A series of consistently organized observations assembled with purpose.                                                                                                                                      |

Two kinds of categories have been defined: software and documents.

Software comprise collections of instructions that dictate how a computer should operate, and documents are bounded sets of recorded information.

Three categories of software and four categories of documents are described in the table.

Packages and libraries are sets of functions assembled with clear purpose, and made accessible using standards established by an underlying platform.

Platforms are the broader systems upon which packages or libraries are plugged into or are meant to extend upon, such as R, Python, QGIS, and Meshlab, which each have their own protocols to facilitate such integration.

Standalone software are tools that may be operated without needing to first access an underlying platform.

And the third category of software, scripts, are sets of pragmatically assembled mutable functions, often lacking complete documentation or adherence to protocols that would otherwise facilitate secondary use outside their original contexts of creation. Things like code generalized sets of code snippets.

As for documents, specifications, protocols and schemas are formal data structures or frameworks intended to be used as models.

Products are stable outcomes of creative work, loosely defined.

Guides are educational resources or documented protocols meant to instruct readers how to apply relevant tools or techniques.

And finally, lists or datasets, including open-archaeo itself, are series of consistently organized observations assembled with purpose.

## Findings

### What archaeologists are making

Our first set of analyses were focused on these questions:

What kinds of software are archaeologists making?

And what are the general purposes of their software?

------------------------------------------------------------------------

Most projects included in open-archaeo are designed to be used as a package or library atop am existing 'platform' -- for example a package for a programming language like R, or a plugin for an application like QGIS.

The designers of this code are basically creating additional functions within the base platform that are useful for archaeological purposes.

Others create standalone software that can be run independently of such platforms, for example desktop or web apps.

A significant amount of projects also comprise of datasets and non-packaged code snippets that have been made available for general use.

```{r plot-categories}
oarch <- mutate(oarch,
                category = recode(category,
                                  "Specifications, protocols and schemas" = "Specifications etc.",
                                  .default = category))
oarch %>%
  drop_na(category) %>%
  group_by(category) %>%
  summarise(n = n()) %>%
  ggplot(aes(fct_reorder(category, n), n)) +
  geom_col() +
  coord_flip() +
  labs(
    title = "Most popular categories",
    subtitle = "By number of projects",
    caption = "Data: open-archaeo.info",
    x = NULL, y = NULL
  ) +
  theme_oarch()

# Export for slides (half slide)
# ggsave("figures/categories.png", width = 127, height = 127, units = "mm")
```

------------------------------------------------------------------------

R is overwhelmingly dominant as a platform, closely followed by Python.

Plugins for QGIS and mobile apps are also relatively popular.

Beyond that, there is a rather fragmented landscape of plugins for other desktop software (e.g. AutoCAD, ArcGIS); a number of lesser used programming languages; and a genre consisting of custom forms and spreadsheet templates.

In the figure below, the darker grey lines are used to break up the bars by primary author, showing that many of the smaller platforms---for example Excel templates---are targeted by only one or two developers. The larger platforms tend to be more diverse.

```{r plot-platforms}
oarch %>%
  drop_na(platform) %>%
  group_by(platform, author1_name) %>%
  summarise(n = n(), .groups = "drop_last") %>%
  mutate(total = sum(n)) %>%
  ggplot(aes(fct_reorder(platform, total), n, group = author1_name)) +
  geom_col(colour = "#333333") +
  coord_flip() +
  labs(
    title = "Most popular platforms",
    subtitle = "By number of projects, split by primary author",
    caption = "Data: open-archaeo.info",
    x = NULL, y = NULL
  ) +
  theme_oarch()

# Export for slides (half slide)
# ggsave("figures/platforms.png", width = 127, height = 127, units = "mm")
```

------------------------------------------------------------------------

If we compare categories with tags, we can see the general domains that each kind of resource is designed to serve.

We see that packages are fairly common across the board.

Tags that are notable for having a higher proportion of standalone software include archaeogenetics, data management, 3D modelling, photogrammetry, drivers and IO, and simulations or agent based modelling.

These tools may require greater access to system resources, or may require more complex user interfaces than are more complex than what R or Python IDEs (integrated development environments) tend to provide.

```{r plot-tags-cats}
detail_tags <- c("Instrumental Neutron activation analysis",
                 "Harris Matrix",
                 "aDNA Simulators",
                 "Damage profilers",
                 "Metagenomic classifers",
                 "aDNA simulators",
                 "aDNA damage-aware genotypers",
                 "Low-coverage contamination estimation",
                 "Low-coverage adapted population-genetics tools",
                 "aDNA preprocessing",
                 "aDNA aligner",
                 "aDNA assembler",
                 "aDNA toolkit")

oarch %>%
  pivot_longer(c(tag1, tag2, tag3, tag4, tag5), values_to = "tag",
               values_drop_na = TRUE) %>%
  drop_na(tag) %>%
  filter(!tag %in% detail_tags) %>%
  mutate(category = recode(category,
                                  "Specifications etc." = "Documents",
                                  "Products" = "Documents",
                                  "Guides" = "Documents",
                                  "Lists and datasets" = "Documents",
                                  .default = category)) %>%
  group_by(tag, category) %>%
  summarise(n = n(), .groups = "drop_last") %>%
  mutate(total = sum(n)) %>%
  ggplot(aes(fct_reorder(tag, total), n, fill = category)) +
  # facet_wrap(vars(category)) +
  geom_col() +
  scale_fill_bright() +
  coord_flip() +
  labs(
    title = "Tags by category",
    caption = "Data: open-archaeo.info",
    x = NULL, y = "Number of projects",
    fill = NULL
  ) +
  theme_oarch() +
  theme(
    axis.text.y = element_text(size = 7)
  )

# Export for slides (full slide)
# ggsave("figures/tags-cats.png", width = 254, height = 127, units = "mm")
```

**ZB NOTE:** Do a temporal analysis to get a sense of when platforms, tags and categories have been gaining popularity. There may not be a need for extreme detail here, but simply noting the dates of first commits might be helpful. I'm imagining a stacked bar chart, with each bar representing a month or a year, and with the stacked portions of each bar representing a platform or category.

### Development processes

While somewhat informative, breaking down the distribution of categories and tags does not really tell us that much about *how* archaeologists develop software.

The remainder of the paper is driven by a concern about how archaeologists collaborate in their programming work.

How is their work sustained, and how does it leverage distributed work processes that are a key aspect of open source software development in general?

To address these questions, we augmented the core open-archaeo dataset with data obtained from GitHub's public API.

That is, for each project in open-archaeo with a GitHub repository, we added information on individual contributors, commits, issues, etc. from the API using the R package `gh` [@gh].

This does reduce our sample size slightly; about an eighth of projects don't use version control, at least not publicly, but as yu can see in the figure below, amongst those that do, GitHub is by far the most popular host.

```{r plot-repo-hosts}
oarch <- mutate(oarch, none = ifelse(is.na(github) &
                                       is.na(gitlab) &
                                       is.na(bitbucket) &
                                       is.na(launchpad) &
                                       is.na(codeberg),
                                     "", NA))

oarch %>%
  pivot_longer(c(github, gitlab, bitbucket, launchpad, codeberg, none),
               names_to = "repo_host", values_to = "repo_url") %>%
  drop_na(repo_url) %>%
  group_by(repo_host, author1_name) %>%
  summarise(n = n(), .groups = "drop_last") %>%
  mutate(total = sum(n)) %>%
  ungroup() %>%
  mutate(repo_host = fct_reorder(repo_host, total),
         repo_host = fct_relevel(repo_host, "none")) %>%
  ggplot(aes(repo_host, n, group = author1_name)) +
  geom_col(colour = "#333333") +
  coord_flip() +
  labs(title = "Most popular repository hosts",
       subtitle = "By number of projects, split by primary author",
       caption = "Data: open-archaeo.info",
       x = NULL, y = NULL)

# Export for slides (half slide)
# ggsave("figures/repo-hosts.png", width = 127, height = 127, units = "mm")
```

We obtained this data in R using the {gh} package; those data, and the analysis code, are available in our research compendium on GitHub.

------------------------------------------------------------------------

Starting with a relatively simple plot, this is a chart of the cumulative growth of open archaeology over the years, measured by code contributions committed and pushed to GitHub repositories.

As we can see, archaeologists have been using git from even before GitHub was launched in 2008. But they really began to get into it around 2014--2015, when we see an uptick in the rate of growth that has continued ever since.

Around this time we also see that GitHub starts being used to host documents and scripts. This may represent a recognition of GitHub's ability to track things other than code, and a willingness to experiment with version control systems as a medium for disseminating work, especially work or manifestations of undervalued skills that may not necessarily be easily represented using traditional publication venues, in an open and somewhat nerdy way.

```{r plot-gh_commits-cum}
oarch %>%
  unnest(gh_commits) %>%
  drop_na(sha) %>%
  mutate(date = floor_date(datetime, "week")) %>%
  mutate(lumped_category = recode(category,
                                  "Specifications etc." = "Documents",
                                  "Products" = "Documents",
                                  "Guides" = "Documents",
                                  "Lists and datasets" = "Documents",
                                  .default = category)) %>%
  group_by(lumped_category, date) %>%
  summarise(n_commits = n(), .groups = "drop_last") %>%
  mutate(cat_total = sum(n_commits)) %>%
  mutate(cum_commits = cumsum(n_commits)) %>%
  ggplot(aes(date, cum_commits,
             fill = fct_reorder(lumped_category, cat_total),
             colour = fct_reorder(lumped_category, cat_total))) +
  geom_area() +
  scale_x_datetime(limits = c(ymd("2005-01-01", tz = "UTC"),
                              ymd("2021-05-31", tz = "UTC")),
                   date_breaks = "2 years",
                   date_labels = "%Y") +
  scale_y_continuous(labels = scales::comma) +
  scale_colour_bright(guide = NULL) +
  scale_fill_bright(guide = guide_legend(reverse = TRUE)) +
  labs(
    title = "Growth of open archaeology",
    subtitle = "Measured by cumulative commits in GitHub repositories",
    caption = "Data: open-archaeo.info and GitHub API",
    x = NULL, y = NULL, fill = NULL
  ) +
  theme_oarch()

# Export for slides (full slide)
# ggsave("figures/commits-cum.png", width = 254, height = 127, units = "mm")
```

------------------------------------------------------------------------

But how is this activity distributed across repositories?

This visualizes the 'pulse' of active projects.

Each vertical line represents the lifespan of a repository; the points on the line are individual commits.

This is sorted by the date of the most recent commit for each repository, so the ones on the top became inactive earlier and the ones on the bottom represent ongoing work.

```{r plot-lifespan}
oarch %>%
  unnest(gh_commits) %>%
  drop_na(datetime) %>%
  group_by(item_name) %>%
  add_tally() %>%
  filter(n > 1) %>%
  mutate(first_commit = min(datetime),
         mid_commit = median(datetime),
         last_commit = max(datetime)) %>%
  ggplot(aes(x = fct_reorder(item_name, last_commit, .desc = FALSE),
             y = datetime,
             ymin = first_commit,
             ymax = last_commit)) +
  geom_linerange(size = 0.05) +
  geom_point(size = 0.1) +
  scale_y_datetime(limits = c(ymd("2005-01-01", tz = "UTC"),
                              ymd("2021-05-31", tz = "UTC")),
                   date_breaks = "2 years", date_labels = "%Y") +
  # coord_flip() +
  labs(
    title = "Project lifespan",
    subtitle = glue("Individual commits in GitHub repositories (with more than 1 commit)"),
    x = NULL, y = NULL,
    caption = "Data: open-archaeo.info and GitHub API"
  ) +
  theme_oarch() +
  theme(
    axis.line.x = element_blank(),
    axis.ticks.x = element_blank(),
    axis.text.x = element_blank(),
    panel.grid.minor.x = element_blank(),
    panel.grid.major.x = element_blank()
  )

# Export for slides (full slide)
# ggsave("figures/lifespan.png", width = 254, height = 127, units = "mm")
```

------------------------------------------------------------------------

The span of time between the first and latest commits is visualized more clearly in summary here.

Notably, many projects are active for only a few short period of time: about 15% less than a month, 25% less than three months, and 40% less than a year.

Projects with a short span of activity tend to have very high commit frequency, whereas there is much more variety in long-term projects.

Among projects with a greater lifespan, those with more total commits have much more frequent activity than those with fewer total commits, which represent the majority of long-lived projects.

The overall negative trend (seen in the top-right graph) can be explained in terms of natural processes, i.e. the only way to fit a high number of commits within the same span as a project with a low number of commits is to commit more frequently.

But bearing in mind both axes use a logarithmic scale, the upper left portion of the graph does appear to suggest that short-lived projects are characterised by a spree of rapid committing; while longer-lived projects have a more diverse range of workrates.

This latter pattern in turn appears to be explained by the number of contributors: projects that sustain a high commit rate over a long period of time tend to rely on a large number of contributors, as per the bottom-right graph.

**ZB NOTE:** Use patchwork package to combine these plots into a unified figure.

```{r plot-lifespan-hist}
# TODO: where does oarch_lifespan come from?
oarch_lifespan %>%
  ggplot(aes(x = lifespan)) +
  geom_histogram(binwidth = 100) +
  scale_x_continuous(breaks = scales::breaks_width(1000)) +
  labs(
    title = "Project lifespan",
    subtitle = "Time between first and latest commit, by repository",
    x = "Days", y = NULL,
    caption = "Data: open-archaeo.info and GitHub API"
  ) +
  theme_oarch()

# Export for slides (half slide)
# ggsave("figures/lifespan-hist.png", width = 127, height = 127, units = "mm")
```

```{r plot-lifespan-vs-rate}
oarch_lifespan %>%
  ggplot(aes(x = lifespan, y = commit_rate, size = n)) +
  geom_point(shape = 21, fill = NA) +
  scale_x_log10() +
  scale_y_log10() +
  labs(
    title = "Project lifespan vs. average commit rate",
    x = "Lifespan (days)", y = "Commits per day", size = "Total commits",
    caption = NULL
  ) +
  theme_oarch()
# Export for slides (half slide)
# ggsave("figures/lifespan-vs-rate-total.png", width = 127, height = 60, units = "mm")

oarch_lifespan %>%
  ggplot(aes(x = lifespan, y = commit_rate, size = n_contribs)) +
  geom_point(shape = 21, fill = NA) +
  scale_x_log10() +
  scale_y_log10() +
  labs(
    title = NULL,
    x = "Lifespan (days)", y = "Commits per day", size = "Contributors",
    caption = "Data: open-archaeo.info and GitHub API"
  ) +
  theme_oarch()
# Export for slides (half slide)
# ggsave("figures/lifespan-vs-rate-contrib.png", width = 127, height = 60, units = "mm")

```

------------------------------------------------------------------------

Perhaps unfortunately then, we also find that nearly 60% of projects have only a single contributor, and projects with more than a dozen are very rare indeed \[\<3%\].

A "contribution", in this case, is a commit, issue, comment applied by a user to a repository.

```{r plot-gh_contributors-histogram}
oarch %>%
  drop_na(gh_repo) %>%
  unnest(gh_contribs) %>%
  group_by(gh_repo) %>%
  summarise(n = n(), .groups = "drop") %>%
  ggplot(aes(x = n)) +
  geom_histogram() +
  scale_x_log10() +
  labs(
    title = "Repository contributors",
    x = "Number of contributors", y = "Repositories",
    caption = "Data: open-archaeo.info and GitHub API"
  ) +
  theme_oarch()

# Export for slides (half slide)
# ggsave("figures/contrib-hist.png", width = 127, height = 127, units = "mm")
```

------------------------------------------------------------------------

Furthermore, when we break down the contributions made by all contributors in multi-contributor projects, we also see that work tends to be distributed very unevenly.

Of multi-contributor repositories, 92% have a third of contributions made by a single person;

65% have half of all contributions made by a single person;

and 36% have three quarters of all contributions made a single person.

Just to clarify, the two rows near the bottom with what seem like very long yellow bars are actually projects that have equal number of contributions made by the top contributors.

```{r plot-contrib-dist}
oarch %>%
  unnest(gh_contribs) %>%
  drop_na(contributor) %>%
  group_by(item_name) %>%
  mutate(n_contributors = n()) %>%
  filter(n_contributors > 1) %>%
  mutate(big_boy = ifelse(contributions == max(contributions),
                          "Main contributor", "Other contributors"),
         big_boy_pct = max(contributions) / sum(contributions)) %>%
  ggplot(aes(x = fct_reorder(item_name, big_boy_pct, .desc = FALSE),
             y = contributions,
             # group = contributor,
             fill = fct_relevel(big_boy, c("Other contributors",
                                           "Main contributor")))) +
  geom_col(position = "fill", colour = "white", size = 0.1) +
  scale_y_continuous(labels = scales::percent) +
  scale_fill_highcontrast(guide = guide_legend(reverse = TRUE)) +
  labs(title = "Repository contributors by proportion of contributions",
       x = NULL, y = "Contributions",
       fill = NULL,
       caption = "Data: open-archaeo.info and GitHub API") +
  coord_flip() +
  theme_oarch() +
  theme(
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank()
  )

# Export for slides (half slide)
# ggsave("figures/contrib-dist.png", width = 127, height = 127, units = "mm")
```

Perhaps as a result of this, we also find that only a minority of projects make much use of collaborative features of GitHub such as issues and pull requests (left) and comments (right).

Only 39% of repositories make use of these features. Of these repositories with any issues and pull requests, 28% have only 1 and 82% have less than 10.

However, of all repositories that have any comments posted in reply to issues and pull requests, there is actually a significant degree of activity.

This seems to suggest that people are willing to respond to issues raised by others, but may not necessarily want to take initiative, for a variety of reasons that may be more effectively investigated through qualitative analysis of the conversations in the issue threads.

```{r plot-issues-hist}
oarch %>%
  unnest(gh_issues) %>%
  drop_na(title) %>%
  group_by(repo) %>%
  summarise(n = n(), .groups = "drop") %>%
  ggplot(aes(x = n)) +
  geom_histogram() +
  scale_x_log10() +
  labs(
    title = "Use of issues",
    caption = "Data: open-archaeo.info and GitHub API",
    x = "Number of issues", y = "Repositories"
  ) +
  theme_oarch()

# Export for slides (half slide)
# ggsave("figures/issues-hist.png", width = 127, height = 127, units = "mm")
```

```{r plot-comments-hist}
oarch %>%
  unnest(gh_comments) %>%
  drop_na(issue_num) %>%
  group_by(repo) %>%
  summarise(n = n(), .groups = "drop") %>%
  ggplot(aes(x = n)) +
  geom_histogram() +
  scale_x_log10() +
  labs(
    title = "Use of comments",
    caption = "Data: open-archaeo.info and GitHub API",
    x = "Number of comments", y = "Repositories"
  ) +
  theme_oarch()

# Export for slides (half slide)
# ggsave("figures/comments-hist.png", width = 127, height = 127, units = "mm")
```

### Formation of collaborative development communities

If we construct a network linking repositories by their common contributors, can we identify emerging networks of collaboration, or are individual projects still largely isolated? If there are networks, what characterises their links?

**ZB NOTE:** I'm speculating that there are going to be various users who have their fingers in many projects, and that those projects tend to be the most active. If this is the case, I would further speculate that these people hold a different attitude regarding authorship and the dividuality of projects that is more in sync with the collaborative capabilities of open source, which are at odds with traditional academic norms regarding how contributions are credited and how products are produced are disseminated.

To construct our graphs we need a table linking users to repos by collaborative activity. For this purpose commits, issues, and comments are all considered contributions.

```{r graph-data}
oarch |>
  drop_na(gh_repo) |>
  unite(tags, c(tag1, tag2, tag3, tag4, tag5)) |>
  select(gh_repo, category, tags, gh_commits, gh_issues, gh_comments) ->
  oarch_graph

oarch_graph <- bind_rows(
  oarch_graph |>
    unnest(gh_commits) |>
    drop_na(author) |> # Apparently real commits, but we can't connect them
    group_by(repo, author) |>
    summarise(category = first(category), tags = first(tags),
              contrib = "commit", n_contrib = n(), .groups = "drop"),
  oarch_graph |>
    unnest(gh_comments) |>
    drop_na(author) |> # Repos with no comments
    group_by(repo, author) |>
    summarise(category = first(category), tags = first(tags),
              contrib = "comment", n_contrib = n(), .groups = "drop"),
  oarch_graph |>
    unnest(gh_issues) |>
    drop_na(author) |> # Repos with no issues
    group_by(repo, author) |>
    summarise(category = first(category), tags = first(tags),
              contrib = "issue", n_contrib = n(), .groups = "drop")
)

# Cleaning
oarch_graph |>
  rename(user = author) |>
  filter(!str_detect(user, coll("[bot]"))) ->
  oarch_graph
```

With this, we can construct our three graphs: repo--user, repo--repo (by common users), and user--user (by common repos).

#### Repo--user

```{r plot-graph-repo-user}
oarch_graph_repo_user <- tbl_graph(nodes_repos_users(oarch_graph),
                                   edges_user_to_repo(oarch_graph))

oarch_graph_repo_user |>
  ggraph(layout = "graphopt") +
  geom_edge_fan(aes(colour = contrib, alpha = n_contrib)) +
  geom_node_point(aes(colour = node_type)) +
  scale_edge_alpha(trans = "log")
```

#### Repo--repo

```{r plot-graph-repo-repo}
oarch_graph_repo_repo <- tbl_graph(nodes_repos(oarch_graph),
                                   edges_common_users(oarch_graph))

oarch_graph_repo_repo |>
  ggraph(layout = "graphopt") +
  geom_edge_link(aes(alpha = n)) +
  geom_node_point(aes(colour = category)) +
  scale_edge_alpha(trans = "log") +
  labs(edge_alpha = "Common contributors")
```

```{r iplot-graph-repo-repo}
iplot <- oarch_graph_repo_repo |>
    ggraph(layout = "graphopt") +
    geom_edge_link(aes(alpha = n)) +
    geom_point_interactive(aes(x, y, colour = category, tooltip = repo)) + 
    scale_edge_alpha(trans = "log") +
    labs(edge_alpha = "Common contributors") +
    theme_graph()

girafe(ggobj = iplot)
```

#### User--user

```{r plot-graph-user-user}
# TODO
```

#### Over time

Could animate the graphs??

## Conclusions

Collaborative open source software development in archaeology has seen a rapid and sustained increase beginning around 2014 or 2015.

In terms of collaboration, our analysis shows an uneven use of git and GitHub's extended features, beyond their basic usage as a version control system and repository host.

The vast majority of repositories have 1--3 contributors, with only a few distinguished by an active and diverse developer base.

Generally speaking, we believe that this is because people do not want to step on other people's shoes by raising issues or intruding on other people's projects.

This may relate to our positions as academics who hold different values relative to the designers of open source development environments, regarding how collaboration should occur, for example, when dealing with how projects and ideas are 'owned' by individuals or communities, and how work should be iteratively improved upon.

We intend to look deeper at the social aspects of collaborative software engineering among archaeologists with a network analysis, and perhaps by leveraging more data from documentation included in each repository.

# Scrap

The GitHub API provides data on the languages used in a repository based on an automated machine learning algorithm.

Since most repositories use more than one language---if only one for the actual software, and another (e.g. HTML) for documentation---this data is presented as a table of languages and the number of bytes of code in that language detected in the repository.

We can therefore measure the popularity of languages across repositories in a couple of ways: based on how many repositories use a language at all; or based on how many bytes of that language are present.

Looking at number of bytes puts C++ and the web languages (HTML, PHP, and Javascript) on top, but this is probably affected by the relative verboseness of these languages and the popularity of web-based documentation across implementation languages. The number of repositories is probably more reliable and shows the popularity of scientific programming languages---R and Python---followed by web languages and then compiled C and C++.

This largely confirms the pattern seen in our manual classification of the 'platform' of each project.

```{r plot-gh_langs, fig.show="hold", out.width="50%"}
oarch %>%
  unnest(gh_langs) %>%
  drop_na(lang, bytes) %>%
  group_by(lang) %>%
  summarise(n = n(), .groups = "drop") %>%
  arrange(-n) %>%
  slice(1:10) %>%
  ggplot(aes(fct_reorder(lang, n, .desc = TRUE), n)) +
  geom_col() +
  labs(title = "Repository languages",
       subtitle = "Number of repositories using top 10 languages",
       caption = "Data: open-archaeo.info and GitHub API",
       x = NULL, y = "Number of repositories")

oarch %>%
  unnest(gh_langs) %>%
  drop_na(lang, bytes) %>%
  group_by(lang) %>%
  summarise(bytes = sum(bytes), .groups = "drop") %>%
  arrange(-bytes) %>%
  slice(1:10) %>%
  ggplot(aes(fct_reorder(lang, bytes, .desc = TRUE), bytes)) +
  geom_col() +
  labs(title = "Repository languages",
       subtitle = "Total bytes of code in top 10 languages",
       caption = "Data: open-archaeo.info and GitHub API",
       x = NULL, y = "Bytes")
```

------------------------------------------------------------------------

About one in eight projects do not use one of these repository host.

Some may use a different host, or not make their repositories publicly available, but it is probably safe to assume that the majority simply do not use version control.

Many of these are standalone documents or code fragments (scripts) hosted, for example, as 'gists', but there are also some pieces of standalone software that apparently do not include version control.

```{r table-no-repo}
# TODO: prettify with gt()
filter(oarch, none == "") %>%
  count(category)
```

------------------------------------------------------------------------

The measures of activity may also be compared with the tags and categories.

```{r plot-lifespan-activity-tags}
# TODO: where does oarch_lifespan come from?
left_join(oarch_lifespan, oarch, by = c("item_name")) %>%
  pivot_longer(c(tag1, tag2, tag3, tag4, tag5), values_to = "tag",
               values_drop_na = TRUE) %>%
  drop_na(tag) %>%
  group_by(tag) %>%
  summarise(avg_lifespan = mean(lifespan),
            avg_commit_rate = mean(commit_rate)) ->
  oarch_lifespan_by_tag

oarch_lifespan_by_tag %>%
  arrange(-avg_lifespan) %>%
  slice(1:10) %>%
  ggplot(aes(x = fct_reorder(tag, avg_lifespan, .desc = TRUE),
             y = avg_lifespan)) +
  geom_col() +
  labs(
    title = "Project lifespan by tag",
    subtitle = "Top 10 longest-lived tags",
    x = NULL, y = "Average lifespan (days)",
    caption = "Data: open-archaeo.info and GitHub API"
  )

oarch_lifespan_by_tag %>%
  arrange(-avg_commit_rate) %>%
  slice(1:10) %>%
  ggplot(aes(x = fct_reorder(tag, avg_commit_rate, .desc = TRUE),
             y = avg_commit_rate)) +
  geom_col() +
  labs(
    title = "Project activity by tag",
    subtitle = "Top 10 most activity tags",
    x = NULL, y = "Average activity (commits per day)",
    caption = "Data: open-archaeo.info and GitHub API"
  )
```

```{r plot-lifespan-activity-cats}
#TODO: Eliminate Infs

left_join(oarch_lifespan, oarch, by = c("item_name")) %>%
  drop_na(category) %>%
  group_by(category) %>%
  summarise(avg_lifespan = mean(lifespan),
            avg_commit_rate = mean(commit_rate)) ->
  oarch_lifespan_by_cat

oarch_lifespan_by_cat %>%
  arrange(-avg_lifespan) %>%
  slice(1:10) %>%
  ggplot(aes(x = fct_reorder(category, avg_lifespan, .desc = TRUE),
             y = avg_lifespan)) +
  geom_col() +
  labs(
    title = "Project lifespan by category",
    subtitle = "Top 10 longest-lived categories",
    x = NULL, y = "Average lifespan (days)",
    caption = "Data: open-archaeo.info and GitHub API"
  )

oarch_lifespan_by_cat %>%
  arrange(-avg_commit_rate) %>%
  slice(1:10) %>%
  ggplot(aes(x = fct_reorder(category, avg_commit_rate, .desc = TRUE),
             y = avg_commit_rate)) +
  geom_col() +
  labs(
    title = "Project activity by categories",
    subtitle = "Top 10 most activity categories",
    x = NULL, y = "Average activity (commits per day)",
    caption = "Data: open-archaeo.info and GitHub API"
  )
```
