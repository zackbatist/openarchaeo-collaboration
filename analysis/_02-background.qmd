# Open science and open source {#sec-background}

Academic open source has a complicated relationship with open source as practiced by professional software developers, which has its own distinct history and is framed by different objectives, challenges, and value regimes. Despite this, the open science movement, within which open archaeology emerged, draws direct inspiration from open source. For instance, the Open Knowledge Foundation [-@openknowledgefoundation2015] publishes a widely accepted definition of "open" in the context of scholarly communication that explicitly refers to the definition of "open source" published by the Open Source Initiative [-@opensourceinitiative2007], an authoritative open source advocacy group. The open science movement further mimics open source by operationalizing scholarly communication through technical infrastructures and protocols that closely resemble systems and processes designed to develop open source software (e.g., the use of plain text, line-resolution version control, emphasis on formal licencing, the general hacker aesthetic). However, academic work, including the development of academic software, differs significantly from the work involved in massive open source projects that literally run the internet, such as the Linux kernel, openSSL and the Firefox web browser. While they may use similar tools and technical protocols to manage coding operations, the open science and open source movements are governed by different social and professional warrants and interests. In other words, publishing code openly on the web has different meanings, impacts and implications for archaeologists and professional software developers [@ratto2007; @kelty2008 chapter 9].
  
## Open source

Open source is a software development model that prioritizes transparent work processes. Initially driven by the idea that computer users should be free to understand and manipulate the software that they install on their computers (e.g., "free software", as initially conceived by the Free Software Foundation), open source has become a means of collaborative software development [@kelty2008: chapter 3, especially starting at page 99]. By putting one's code on the web without restriction on how it may be used or manipulated, this encourages creativity to flourish as people contribute to help improve the code base. Software thus emerges from the coordinated labour of worldwide volunteers, who shape the product according to the collective vision [see @kelty2008 on the emacs saga for a quintessential example]. An open code base may also be used to support alternative projects whose missions diverge from the original plan, and an entire project may be "forked", or taken in a new direction if contributors are dissatisfied with how core developers run things.

Open source has traditionally been referred to as being based on meritocratic principles [@raymond1999 39]. A good test of whether a contribution should be included in a published software release is whether it is functional [@kelty2008 220]. Moreover, with more eyes looking over a code base, it is easier to identify flaws with a contribution and flag potential bugs or security issues [@raymond1999 27-30]. This is all done in the spirit of producing functional code, and in ideal circumstances faulty contributions will be corrected before inclusion. Personal ego is minimized in favour of co-creating stable and functional outcomes [@raymond1999 39-41].

However, this is not the same as saying that open source is completely anarchic or based on the "wisdom of crowds". In fact, successful open source projects incorporate complex organizational structures, governance strategies, and forms or social mediation to help delegate and vet contributions made by distributed participants [@oneil2009]. They rely on, rather than eschew, institutional support structures, in order to motivate work, keep volunteer maintainers involved, and generally ensure that the project can be sustained over the long-term. Open source is more than just putting your code online; to be successful, it requires participation in a social experience [@ratto2003; @kelty2008].

In other words, as with many so-called "soft skills" that are crucial for academic professional development, additional competencies relating to the maintenance, management, and distribution of software, such as the ability to receive and implement feedback, set and stick with long-term goals, coordinate labour, document work practices, and collaborate with others, are grossly under-appreciated factors that contribute to an open source project's success.

We therefore consider open source to be a means of collaboration more than a means of transmitting information. It involves developing software as part of a group, developing consensus, and working with common purpose. Crucially, it also involves having a welcoming attitude, a sense of humility, and an understanding that one's work may be appropriated and used in unanticipated ways.

## Open science

The open science movement comprises a series of practices and principles intended to make research more accessible, transparent, and efficient. Although the concept of "open" is somewhat nebulous, in terms of its abstract definition and with regards to what real-world applications count as being open, one commonly-cited definition describes content that "can be freely used, modified, and shared by anyone for any purpose" [@openknowledgefoundation2015]. This definition does not state what open is for, how to be open, or any sort of social or discursive framing behind the open movement. However, most open science advocates (including archaeologists, as elicited by @beck2012 and @marwick2017) claim that they are motivated by a desire to facilitate novel research opportunities, make participation in scientific research more equitable, reclaim science as a public good, and enhance how findings are validated and legitimized.

The idea that scientists should generally contribute to a public domain of knowledge without profit motive has led to open science being heralded as revolutionary, community-oriented, and anti-capitalist means of production. However, while open science does have the _potential_ to effect radical change, this is not a given. The social and institutional contexts in which we do science is firmly embedded within capitalist and neoliberal power structures that reward individualistic competition and do little to actually encourage equitable and accessible research practices, and as such, make it difficult to fully embrace open science ideals [@mirowski2018]. Moreover, the open science movement, which is dominated by STEM disciplines, prioritizes a grossly simplified and asocial notion of what science is and entails. Namely, it considers science as the accumulation and assembly of a species-level understanding of the world, which is not held by any one individual but is stored in seemingly value-neutral and disembodied media, facts and observations. This is manifested by digital telecommunications systems that host files, document processes, facilitate co-working opportunities, and perform automated processes. However, these systems have become so emblematic of open science that the use of these tools and resources designed to _support_ open science is often mistaken for _actually doing_ open science.

Open science is typically compared with the open source movement in that they both involve a distributed, digitally-mediated and worldwide labour force, who somehow derive rough consensus directed towards assets held in the public domain [@tennant2020]. But they differ in terms of the contexts in which they operate, the stakeholders involved, and the kinds of outcomes they produce. Whereas open source emerged from concern of consumer rights and then developed as a means of maintaining resilient and collectively motivated projects, open science comes out of a desire to make research practices more transparent and accessible. Open source is performed by professional and hobbyist software developers alike, and participants contribute in a wide variety of ways (including: programming, writing documentation, translating software and documentation, bug reporting, and financial support), but, in open science, scientists are usually the only participants actively involved in creating and maintaining contributions. 
Moreover, whereas open source projects often attract participants with varied stakes in the software and use cases in mind, open science projects are typically bounded by small communities of specialists with very particular needs. Additionally, open science is bounded by the professional contexts in which science operates, and as such, produces outputs that can be easily credited to specific sets of individuals for reasons of resume-building, tenure and promotion [@mirowski2018; @dorta-gonzalez2021]. Open science projects whose contributions are supported by research funding also face sustainability concerns, as participants lose motivation to contribute once funding runs out. Once a project is completed, papers have been published, and credit has been allocated, it is common for scientists to mark their projects as finished and move on to new endeavours [@kelty2008: 271-275]. Open source projects, on the other hand, are motivated by a more practical need for the software to function properly in perpetuity, and contributors may remain actively or sporadically involved to satisfy users' needs, or to direct users to derivative and functional forks of abandoned software [@kelty2008: 278-281; @coleman2012: 116-122; @hippel2003].

The adoption of open source development models among archaeologists is generally informed by the broader open science movement, which is motivated by a genuine desire to facilitate novel research opportunities, to make participation in scientific research more equitable, to reclaim science as a public good, and to enhance the means of validating findings. However, the predominant concern with implementing best tools to use, adopting optimal data processing pipelines, and tying into global, web-based infrastructures, protocols and standards [cf. @kansa2014; @kintigh2015; @roosevelt2015] distract from fundamental tensions and contradictions regarding the actual value of working in the open. For instance, Faniel et al. [-@faniel2013 299-301], Atici et al. [-@atici2013 676-677], Huggett [-@huggett2018; -@huggett2022], @sobotkova2018, @opitz2021, @haciguzeller2021, and @batist2023a demonstrate that to make the reuse of archaeological data feasible and useful in a practical sense, it is necessary to re-introduce social friction that these infrastructures are designed to eliminate. In other words, the pressures and circumstances of being an archaeologist and doing archaeological research assert themselves when attempting to make practical use of these infrastructures, and therefore must be accounted for in their design and implementation. In this paper we aim to identify similar sources of dissonance with regards to the promise, potential, and actual implementation of open source software development models among archaeologists.

## Git and GitHub

Open source is an inherently internet-based development model and is supported by technical infrastructures which facilitate global distribution of labour and code.
Here we provide a brief overview of key technologies that archaeologists have come to rely on as they develop open source software.
See @tbl-glossary a glossary of the git-, GitHub- and software engineering-related terminology which we use here and throughout this paper.

```{r tbl-glossary}
#| tbl-cap: Glossary of git and GitHub terminology
tribble(
  ~term, ~definition,
  "Comment", "On GitHub, text post attached to an issue, including the first one that describes the issue",
  "Commit", "Set of changes (addition, alteration, or deletion) to files in a repository that has been recorded by git as one entry in its log",
  "Commit access", "Ability to make changes to a repository directly, without making a pull request",
  "Contributor", "User that has made at least one commit to a specified repository",
  "Follow", "Add activity by another user to a user's timeline",
  "Forge", "Web-based platform for hosting, distributing and facilitating collaboration on version controlled computer code, e.g. GitHub, GitLab, Codeberg",
  "Fork", "Copy of a repository owned by another user; forking is a prerequisite to making a pull request",
  "git", "Open source version control software",
  "GitHub", "Commercial platform that freely hosts git repositories and provides extended collaboration and social networking features, such as pull requests, issues and stars",
  "GitLab", "Open source alternative to GitHub",
  "CodeBerg", "Open source alternative to GitHub",
  "Issue", "Feature of GitHub that records and tracks a bug report, feature request or other suggestion in a repository",
  "Maintainer", "Individual that has overall control of a repository, generally assumed to be its primary contributor. Repositories can have multiple users with commit access in addition to the maintainer.",
  "Merge", "Accept a pull request and incorporate its changes into a repository.",
  "Organization", "Entity representing a group of users, which can also own repositories",
  "Pull request", "Mechanism by which users that don't have commit access to a repository can contribute to it. The repository's maintainer or another user with commit access must decide whether to merge (accept) the changes, or decline them.",
  "Repository", "Individual project that uses git for version control. Can include a mix of different types of files.",
  "Star", "GitHub's version of a 'like', applied by users to a repository.",
  "Timeline", "Chronological feed of GitHub activity from repositories a user has starred and other users they follow. Also includes repositories that a user is not following if they are 'trending' or determined relevant by GitHub's algorithm.",
  "User", "On GitHub, an individual with an account that can own repositories",
  "Version control", "System for tracking changes (additions, alterations, or deletions) in a set of files, typically but not exclusively computer code"
) |>
  rename_with(tools::toTitleCase) |>
  tt() |>
  format_tt(2, markdown = TRUE) |>
  style_tt(j = 1, italic = TRUE)
```

Chief among these is git, a protocol designed to facilitate open and distributed contributions to a common code base.
It operates by providing mechanisms for synchronizing communal, web-based public repositories with local iterations stored on contributors' private workstations.
Contributors who volunteer or are assigned to develop, inspect, or revise a specific aspect of a code base download a copy of the public repository into their own work environment, create a fork in which they apply their modifications, and then request that their fork be merged into the central code base.
After a public repository's maintainers decide to merge the proposed changes into the communal code base, other developers may use git to download these changes while keeping their own independent forks intact.

Git is also designed to facilitate code review and version control.
All modifications are tracked as "diffs", which highlight additions or deletions to the code base, including changes within individual files.
Typically, a contributor will group a series of changes into a more comprehensive "commit" based on a specific task or part of a workflow.
Commits are always accompanied by a message, in which the contributor (ideally) describes the reason and context for the changes included in the commit.
Moreover, git assigns each commit a unique identifier and identifies the contributor by name and email address to ensure some degree of public accountability.

Software forges—collaborative web platforms like GitHub, GitLab and Codeberg—are designed to facilitate open source software development by hosting public git repositories.
However, they also support common software developer and project management practices, such as issue and bug tracking, code-commenting, task management, identity and permissions management, web publishing, vulnerability detection, creation and maintenance of metadata, and financial sponsorship.
These platforms also implement standard social media functions, like the ability to follow projects and individual users to receive updates on their activities, "star" certain repositories as a combine bookmarking and 'like' feature, and maintain a public-facing profile that includes personally-identifying information (e.g. profile picture, username, real name, employer or affiliation), references to all public activity on the platform, and links to the user's other social media profiles.
Code-sharing platforms thus serve as comprehensive developer portfolios and community networking resources.
While these additional features are meant to complement and enhance the experience of contributing to open source projects, they are not actually part of the git protocol.

