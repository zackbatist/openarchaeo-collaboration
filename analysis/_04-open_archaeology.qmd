---
bibliography: references.bib
---

# Open archaeology {#sec-open-archaeology}

As of writing, open-archaeo catalogues `r nrow(oarch)` resources created by and for archaeologists.
It includes both software and documents, but not research compendiums.^[see [https://github.com/benmarwick/ctv-archaeology#publications-that-include-r-code](https://github.com/benmarwick/ctv-archaeology#publications-that-include-r-code) for a similar list of archaeology publications that include R code]
We annotated each record with categories and tags that describe what aspect of archaeological research each tool or resource was meant to address.
We also categorized all records based on how each tool or resource is meant to be accessed or used, and assigned tags based on how developers identified their projects' purpose and scope.
See @batist2023 for a more comprehensive overview of the tags and categories applied to open-archaeo.

```{r tbl-categories}
#| tbl-cap: Categories of open archaeology projects
tribble(
  ~category, ~url,                               ~kind,       ~scope,
  "Packages and libraries", "https://open-archaeo.info/categories/packages-and-libraries/",                "Software", "Sets of functions assembled with clear purpose, and made accessible using standards established by an underlying platform.",
  "Standalone software", "https://open-archaeo.info/categories/standalone-software/",                   "Software", "Software that may be operated without needing to first access an underlying platform.",
  "Scripts", "https://open-archaeo.info/categories/scripts/",                               "Software", "Sets of pragmatically assembled mutable functions, often lacking complete documentation or adherence to protocols that would otherwise facilitate secondary use outside their original contexts of creation.",
  "Specifications, protocols and schemas", "https://open-archaeo.info/categories/specifications-protocols-and-schemas/", "Documents", "A formal data structure or framework intended to be used as a model.",
  "Products", "https://open-archaeo.info/categories/products/",                              "Documents", "Stable outcomes of creative work.",
  "Guides", "https://open-archaeo.info/categories/guides/",                                "Documents", "An educational resource or documented protocol meant to instruct readers how to apply relevant tools or techniques.",
  "Lists and datasets", "https://open-archaeo.info/categories/lists-and-datasets/",                    "Documents", "A series of consistently organized observations assembled with purpose."
) |>
  left_join(oarch, by = "category") |>
  count(kind, category, url, scope) |>
  mutate(
    category = glue("[{category}]({url})"),
    p = n / sum(n),
    p = paste0(format(p * 100, trim = TRUE, digits = 1), "%")
  ) |>
  arrange(desc(kind), -n) |>
  select(category, scope, n, p) |>
  rename_with(tools::toTitleCase) |>
  rename(`%` = p) |>
  tt() |>
  group_tt(list("Software" = 1, "Documents" = 4)) |>
  format_tt(1, markdown = TRUE)
```

```{r data-categories-platforms}
# Merge smaller categories for subsequent analyses
oarch <- mutate(
  oarch,
  category = recode(
    category,
    "Specifications, protocols and schemas" = "Other documents",
    "Products" = "Other documents",
    "Guides" = "Other documents",
    .default = category
  ),
  category = factor(
    category, 
    c("Packages and libraries", 
      "Standalone software",
      "Scripts",
      "Lists and datasets",
      "Other documents")
  )
)

n_platform <- sum(!is.na(oarch$platform))
p_platform <- n_platform / nrow(oarch)

n_standalone <- nrow(filter(oarch, category == "Standalone software"))
p_standalone <- n_standalone / nrow(oarch)

n_datasets <- nrow(filter(oarch, tag1 == "Datasets" | tag2 == "Datasets" | 
                            tag3 == "Datasets" | tag4 == "Datasets" | 
                            tag5 == "Datasets"))
p_datasets <- n_datasets / nrow(oarch)

n_scripts <- nrow(filter(oarch, category == "Scripts"))
p_scripts <- n_scripts / nrow(oarch)
```

In our breakdown of open-archaeo by category (see @tbl-categories), we demonstrate the pervasiveness of various development models, and the requisite technical capabilities that developers assume users hold.
Most resources (`r percent(p_platform)`) included in open-archaeo are designed to be used atop an existing "platform" -- for example a package that extends a programming language or a plugin for an application.
Essentially such projects create additional functions within the base platform that are useful for archaeological purposes.
Others create standalone software (`r percent(p_standalone)`) that can be run independently of such platforms, for example desktop or web apps.
A significant number of projects also comprise of datasets (`r percent(p_datasets)`) and non-packaged code snippets (`r percent(p_scripts)`) that have been made available for general use.

```{r tbl-platforms}
#| tbl-cap: Platforms and programming languages used by open archaeology projects
oarch |>
  drop_na(platform) |>
  count(platform) |>
  mutate(
    significant = n > 1,
    platform = if_else(significant, platform, "Other")
  ) |>
  group_by(platform) |>
  summarise(n = sum(n)) |>
  mutate(
    p = n / sum(n),
    p = paste0(format(p * 100, trim = TRUE, digits = 1), "%")
  ) |>
  arrange(platform == "Other", -n) |>
  rename_with(tools::toTitleCase) |>
  tt()
```

```{r num-p_platform_r}
p_platform_r <- sum(oarch$platform == "R", na.rm = TRUE) / nrow(oarch)
p_platform_python <- sum(oarch$platform == "Python", na.rm = TRUE) / nrow(oarch)
p_platform_qgis <- sum(oarch$platform == "QGIS", na.rm = TRUE) / nrow(oarch)
```

`r percent(p_platform_r)` of projects are extensions to the statistical programming language R, making it the most widely-used platform by a large margin (@tbl-platforms).
Python, another programming language, is also relatively popular (`r percent(p_platform_python)`), as are plugins for the open source geographic information system QGIS (`r percent(p_platform_qgis)`).
Beyond that, there is a rather fragmented landscape of plugins for other desktop software (e.g. AutoCAD, ArcGIS), a number of lesser used programming languages, and a genre consisting of custom forms and spreadsheet templates.
Many of these are targeted by only one or two developers; the larger platforms tend to be more diverse.

At first glance, the relative popularity of R versus Python is perhaps surprising; Python is regularly ranked as the most popular programming language in the world, with R a distant runner-up.
However, it accords with the popularity of R as a tool for data analysis in archaeology [@schmidt2020] and other scientific disciplines [@lai2019].

Our analysis of thematic tags highlights aspects of archaeological work that software developers are inclined to contribute to (@tbl-tags).
The most common themes are work that naturally benefits from advanced information processing afforded by computers, such as statistical analysis, sample calibration, geographical analysis, data management, and chronological modelling.
Educational resources and practical guides are also well represented due to the web's usefulness as a medium for sharing and communication.

When we compare categories with thematic tags, we see the general domains that each kind of resource is designed to serve.
We see that packages are fairly common across the board.
Tags that are notable for having a higher proportion of standalone software include archaeogenetics, data management, 3D modelling, photogrammetry, drivers and IO, and simulations or agent based modelling.
These tools may require greater access to system resources, or may require more complex user interfaces than are more complex than what R or Python IDEs (integrated development environments) tend to provide.

```{r tbl-tags}
#| tbl-cap: Themes of open archaeology projects
oarch |>
  pivot_longer(c(tag1, tag2, tag3, tag4, tag5), values_to = "tag",
               values_drop_na = TRUE) |>
  drop_na(tag) |>
  group_by(tag, category) |>
  summarise(n = n(), .groups = "drop_last") |>
  mutate(total = sum(n)) |>
  pivot_wider(names_from = category, values_from = n) |>
  mutate(
    tag = glue("[{tag}](https://open-archaeo.info/tags/{slugify(tag)})"),
    across(everything(), \(x) replace_na(x, 0))
  ) |>
  arrange(-total) |>
  rename(theme = tag) |>
  rename_with(tools::toTitleCase) |>
  tt() |>
  format_tt(1, markdown = TRUE)
```

To enact their mandate of ensuring that anyone can access and modify software and other creative works, the open source and open science movements encourage developers and scientists to adopt open licenses.
Licenses are legally-binding statements that stipulate how a creative work can be accessed and used.
Proprietary licenses usually require explicit permission to be granted so that the work can be accessed or modified, usually in exchange for financial compensation.
Open licenses, on the other hand, are more permissive, and allow anyone to use creative works without such harsh restrictions.
While it is certainly possible to write your own license, it is very common to simply use one of several standardized open licenses (see [choosealicense.com](https://choosealicense.com for a more comprehensive overview of various options)).
Some licenses, like GNU, MIT and Apache, are explicitly suited for distributing software, and specify certain use cases that are afforded by digital media.
Other licenses, like the Creative Commons variants, are more suited to other kinds of creative works like books, articles, movies, music, photographs, and websites.
The Creative Commons licenses also include clauses that cater to academic or creative sensibilities, such as requirements to attribute credit to the original authors, to restrict commercial use, and to propagate similar restrictions in derivative works.

```{r data-licenses}
# open-archaeo_licenses.csv contains a list of licenses that had to be manually 
# verified. This is necessary due to the fact that GitHub and CRAN have 
# different conventions for naming the files containing the license.
oarch_licenses <- read_csv(here("analysis/data/raw_data/open-archaeo_licenses.csv"))
oarch_licenses |>
  select(gh_repo = url, other_license = license) |>
  right_join(oarch, by = "gh_repo") |>
  hoist(gh_repo_info, license = list("license", 1, "spdx_id")) |>
  mutate(license = if_else(license == "NOASSERTION", other_license, license)) |>
  select(-other_license) ->
  oarch

p_license_gpl <- n_filter(oarch, str_detect(license, "GPL")) / n_filter(oarch, !is.na(license))
p_license_mit <- n_filter(oarch, str_detect(license, "MIT")) / n_filter(oarch, !is.na(license))
p_license_cc <- n_filter(oarch, str_detect(license, "CC")) / n_filter(oarch, !is.na(license))
```

```{r tbl-repo-licenses}
#| tbl-cap: Licenses used by open archaeology projects on GitHub
# TODO: Add links to licenses?
oarch |>
  mutate(license = str_remove(license, "-?\\d\\.\\d$")) |>
  count(license) |>
  mutate(
    license = replace_na(license, "None detected"),
    p = n / sum(n),
    p = paste0(format(p * 100, trim = TRUE, digits = 1), "%")
  ) |>
  arrange(-n) |>
  rename_with(tools::toTitleCase) |>
  rename(`%` = p) |>
  tt()
```

Roughly half of open-archaeo repositories are accompanied by an explicit license (@tbl-repo-licenses).
Two common free software licenses account for the majority of these: the GNU General Public License (GPL, `r percent(p_license_gpl)`) and the MIT License (`r percent(p_license_mit)`).
These differ primarily in the restrictions they place on reuse: the MIT License aims to be maximally permissive, while the GPL is a 'copyleft' license that specifies that all derivative works must be distributed under similar terms (in other words, it prohibits the use of open source software within non-open software, [@dusollier2007].
Interestingly, archaeologists' preference for the more restrictive of these two licenses is the reverse of the general trend seen in open source projects on GitHub [@balter2015].
Creative Commons licenses are a distant third place (`r percent(p_license_cc)` of repositories), in contrast to their widespread use for other forms of scholarly output [@kim2007].
Many repositories do not specify a license; given a documented misconception among academics that GitHub can serve as a sustainable and long-term code and data hosting platform [@milliken2021; @escamilla2022; @escamilla2023], it is possible that many maintainers whose work is included in open-archaeo similarly assumed that making their work available, without explicitly stating permissible use, is enough to allow unrestricted access to the repository's contents.
However, we can not verify this potential explanation given the methods we currently employ, and more discursive qualitative research is needed to explore the rationales behind such decisions.

Archaeological software development activity has increased significantly over the years.
@fig-github-cumulative shows the cumulative growth of code contributions committed and pushed to GitHub repositories, and the number of GitHub repositories that host archaeological software and resources.

```{r fig-github-cumulative}
#| fig-cap: Growth of open archaeology projects on GitHub
dt_last_commit <- oarch |> unnest(gh_commits) |> pull(datetime) |> max(na.rm = TRUE)
  
p_gh_commits_cum <- oarch |>
  unnest(gh_commits) |>
  drop_na(sha) |>
  mutate(date = floor_date(datetime, "week")) |>
  group_by(category, date) |>
  summarise(n_commits = n(), .groups = "drop_last") |>
  mutate(cum_commits = cumsum(n_commits)) |>
  group_by(category) |>
  nest() |>
  mutate(data = map(data, \(x) { # Extend the range of each category to end
    bind_rows(x, list(date = dt_last_commit, cum_commits = max(x$cum_commits)))
  })) |>
  unnest(c(data)) |>
  ggplot(aes(date, cum_commits,
             fill = fct_rev(category),
             colour = fct_rev(category))) +
  geom_area() +
  annotate("segment", 
           x = ymd("2008-04-01", tz = "UTC"), 
           xend = ymd("2008-04-01", tz = "UTC"),
           y = 16000, yend = 4000,
           arrow = arrow(type = "closed", length = unit(0.02, "npc"))) +
  annotate("text", 
           x = ymd("2008-04-01", tz = "UTC"), y = 19000,
           label = "GitHub\nlaunched",
           vjust = 0) +
  scale_x_datetime(limits = c(ymd("2006-12-31", tz = "UTC"), dt_last_commit),
                   date_breaks = "2 years", 
                   date_labels = "%Y",
                   expand = c(0,0)) +
  scale_y_continuous(labels = scales::comma) +
  scale_colour_bright(guide = guide_none()) +
  scale_fill_bright() +
  labs(
    y = "Cumulative commits",
    x = NULL, fill = NULL
  ) +
  theme_oarch() +
  theme(legend.position = "top")

p_gh_repos_cum <- oarch |>
  unnest(gh_commits) |>
  drop_na(sha) |>
  group_by(repo) |> 
  filter(datetime == min(datetime)) |> # Only first commits
  mutate(date = floor_date(datetime, "week")) |>
  group_by(category, date) |>
  summarise(n_repos = n(), .groups = "drop_last") |>
  mutate(cat_total = sum(n_repos)) |>
  mutate(cum_repos = cumsum(n_repos)) |>
  select(category, date, cum_repos) |>
  group_by(category) |>
  nest() |>
  mutate(data = map(data, \(x) { # Extend the range of each category to end
    bind_rows(x, list(date = dt_last_commit, cum_repos = max(x$cum_repos)))
  })) |>
  unnest(c(data)) |>
  ggplot(aes(date, cum_repos,
             fill = fct_rev(category),
             colour = fct_rev(category))) +
  geom_area() +
  annotate("segment",
           x = ymd("2008-04-01", tz = "UTC"),
           xend = ymd("2008-04-01", tz = "UTC"),
           y = 40, yend = 10,
           arrow = arrow(type = "closed", length = unit(0.02, "npc"))) +
  annotate("text",
           x = ymd("2008-04-01", tz = "UTC"), y = 50,
           label = "GitHub\nlaunched",
           vjust = 0) +
  scale_x_datetime(limits = c(ymd("2006-12-31", tz = "UTC"), dt_last_commit),
                   date_breaks = "2 years", 
                   date_labels = "%Y",
                   expand = c(0,0)) +
  scale_y_continuous(labels = scales::comma) +
  scale_colour_bright(guide = guide_none()) +
  scale_fill_bright(guide = guide_none()) +
  labs(
    y = "Cumulative repositories",
    x = NULL, fill = NULL
  ) +
  theme_oarch()

p_gh_commits_cum / p_gh_repos_cum
```

As we can see <!-- this is no longer evident in the figure -->, archaeologists have been using git from even before GitHub was launched in 2008.
But use of git really began to take off around 2014--2015, when we see an uptick in the rate of growth.
Around this time we also see that GitHub starts being used to host documents and scripts.
This may represent a recognition of GitHub's ability to track things other than code, and a willingness to experiment with version control systems as a medium for disseminating work in an open and somewhat nerdy way.

However, since around 2022, the number of new GitHub repositories has significantly plateaud, while the cumulative number of commits has continued to rise.
This may relate to a general emphasis on maintaining existing code and working on established projects, rather than spinning up new ones.
