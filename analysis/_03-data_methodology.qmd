# Data and methodology

<!--
* open-archaeo
* GitHub API
* Indicate how much is on GitHub or elsewhere
  -->

<!-- TODO: snappier title? Maybe incorporating 'open-archaeo'? -->

Our study comprises an exploratory analysis of open-archaeo [@batist2023], a list of open source archaeological software and other digital resources.
As of right now it includes <!-- TODO: encode -->408 items, which are rendered for the web at [open-archaeo.info](open-archaeo.info).
We compiled the dataset by browsing collaborative software development platforms such as GitHub, GitLab and Codeberg, and by tracing connections to other personal, professional, and institutional websites that describe and host additional archaeological software.
This entailed manually crawling through users' profiles, particularly those who identify as archaeologists or who have contributed to tools that pertain to archaeological work.
We supplemented this quasi-systematic collection strategy with word-of-mouth contributions made by interested individuals who identified relevant work that we initially overlooked.

```{r tbl-glossary}
#| tbl-cap: Glossary of git and GitHub terminology
tribble(
  ~term, ~definition,
  "Comment", "On GitHub, Text post attached to an issue, including the first one that describes the issue",
  "Commit", "Set of changes (addition, alteration, or deletion) to files in a repository that has been recorded by git as one entry in its log",
  "Commit access", "Ability to make changes to a repository directly, without making a pull request",
  "Contributor", "User that has made at least one commit to a specified repository",
  "Follow", "Add activity by another user to a user's timeline",
  "Forge", "Web-based platform for hosting, distributing and facilitating collaboration on version controlled computer code, e.g. GitHub, GitLab, Codeberg",
  "git", "Open source version control software",
  "GitHub", "Commercial platform that freely hosts git repositories and provides extended collaboration and social networking features, such as pull requests, issues and stars",
  "GitLab", "Open source alternative to GitHub",
  "CodeBerg", "Open source alternative to GitHub",
  "Issue", "Feature of GitHub that records and tracks a bug report, feature request or other suggestion in a repository",
  "Maintainer", "Individual that has overall control of a repository, generally assumed to be its primary contributor. Repositories can have multiple users with commit access in addition to the maintainer.",
  "Merge", "Accept a pull request and incorporate its changes into a repository.",
  "Organization", "Entity representing a group of users, which can also own repositories",
  "Pull request", "Mechanism by which users that don't have commit access to a repository can contribute to it. The repository's maintainer or another user with commit access must decide whether to merge (accept) the changes, or decline them.",
  "Repository", "Individual project that uses git for version control. Can include a mix of different types of files.",
  "Star", "GitHub's version of a 'like', applied by users to a repository.",
  "Timeline", "Chronological feed of GitHub activity from repositories a user has starred and other users they follow. Also includes repositories that a user is not following if they are 'trending' or determined relevant by GitHub's algorithm.",
  "User", "On GitHub, an individual with an account that can own repositories",
  "Version control", "System for tracking changes (additions, alterations, or deletions) in a set of files, typically but not exclusively computer code"
) |>
  gt() |>
  cols_label_with(fn = tools::toTitleCase) |>
  fmt_markdown(definition)
```


<!-- TODO:
* Introduce git, GitHub, etc. and describe briefly how they work for non-users
-->

Open-archaeo is a relatively comprehensive list.
While our initial intention was to only list open source software, its scope has expanded to include all software created by and for archaeologists.
Apart from regular updates by its primary maintainer (ZB), it has been expanded by a wider network of contributors and has benefited from the wider range of domain specialisms this has brought.
However, open-archaeo generally lacks software written before archaeologists started using collaborative software development platforms such as GitHub, and software that is not shared on the web at all.
The dataset is also limited by the experiences of its primary maintainers.
We welcome anyone, especially domain specialists who are familiar with the kinds of tools commonly used in their specific fields, to help fill in these gaps.

```{r data-oarch}
read_csv("https://github.com/zackbatist/open-archaeo/raw/2023-08-29/open-archaeo.csv") %>%
  mutate(category = na_if(category, "?")) ->
  oarch

# Extract clean repos from GitHub URLs
oarch %>%
  mutate(
    gh_repo = str_match(oarch$github, "^https://github.com/([\\w-\\.]+/[\\w-\\.]+)/?.*?$")[,2]
  ) ->
  oarch

# Amalgamate categories into fewer rough categories
# TODO: redo
oarch <- mutate(oarch, rough_category = recode(category,
                                 "R" = "Packages (R, Python, etc.)",
                                 "Web apps" = "Standalone apps",
                                 "Datasets" = "Analyses & datasets",
                                 "Tutorials" = "Lists & tutorials",
                                 "Python" = "Packages (R, Python, etc.)",
                                 "Desktop apps" = "Standalone apps",
                                 "QGIS" = "Plugins",
                                 "Lists" = "Lists & tutorials",
                                 "Mobile apps" = "Standalone apps",
                                 "Analyses" = "Analyses & datasets",
                                 "Spreadsheets" = "Forms & spreadsheets",
                                 "Command line tools" = "Standalone apps",
                                 "Plugins" = "Plugins",
                                 "ArcGis" = "Plugins",
                                 "Filemaker" = "Plugins",
                                 "ODK" = "Forms & spreadsheets",
                                 "Lisp" = "Packages (R, Python, etc.)",
                                 .default = "Other",
                                 .missing = "Other"
                                 ))

# TODO: exclude peripheral repos that throw things off
# * Big boys like QField (see _06-network.qmd)
# * ArchaeoLines â€“ ends up picking up the whole stellarium repo, which is huge
# * aDNA??
```

```{r data-github}
# If cached data at `analysis/data/derived_data/oarch.RData` is present, this
# chunk will prefer to load it rather than make requests to the GitHub API.
# Delete this file to fetch fresh data from the GitHub or modify 
# `cached_gh_data` to read a different cached version.
#
# Note that fetching data from the GitHub API takes some time and is subject to
# a rate limit:
# <https://docs.github.com/en/rest/overview/resources-in-the-rest-api#rate-limiting>
#
# You will need to authenticate authenticate with GitHub credentials to get a
# rate limit sufficient to obtain the required data, see 
# <https://gh.r-lib.org/articles/managing-personal-access-tokens.html>
# for options on how to do this.
cached_gh_data <- here("analysis/data/derived_data/oarch.RData")
if (!file_exists(cached_gh_data)) {
  oarch$gh_repo_info <- map(oarch$gh_repo, gh_repo_info, .progress = TRUE)
  oarch$gh_langs <- map(oarch$gh_repo, gh_lang, .progress = TRUE)
  oarch$gh_contribs <- map(oarch$gh_repo, gh_contrib, .progress = TRUE)
  oarch$gh_issues <- map(oarch$gh_repo, gh_issue, .progress = TRUE)
  oarch$gh_comments <- map(oarch$gh_repo, gh_comment, .progress = TRUE)
  oarch$gh_commits <- map(oarch$gh_repo, gh_commit, .progress = TRUE)
  saveRDS(oarch, cached_gh_data)
}
oarch <- readRDS(cached_gh_data)
```

```{r data-oarch_forges}
oarch_forges <- oarch |>
  mutate(none = ifelse(is.na(github) & is.na(gitlab) & is.na(bitbucket) &
                         is.na(launchpad) & is.na(codeberg), "", NA)) |>
  pivot_longer(c(github, gitlab, bitbucket, launchpad, codeberg, none),
               names_to = "repo_host", values_to = "repo_url") |>
  drop_na(repo_url) |>
  count(category, repo_host) |>
  pivot_wider(names_from = category, values_from = n, values_fill = 0) |>
  mutate(
    total = rowSums(across(Guides:`Standalone software`)), 
    p_total = total / sum(total),
    .before = Guides
  ) |>
  arrange(repo_host == "none", desc(total)) |>
  mutate(repo_host = recode(repo_host,
                            github = "GitHub",
                            codeberg = "Codeberg",
                            gitlab = "GitLab",
                            bitbucket = "BitBucket",
                            launchpad = "Launchpad",
                            none = "None"))

p_no_vc <- filter(oarch_forges, repo_host == "None")[["p_total"]]
p_no_github <- sum(filter(oarch_forges, repo_host != "None" & repo_host != "GitHub")$p_total)
```

```{r tbl-forges}
#| tbl-cap: Software forges used by open-archaeo projects
gt(oarch_forges) |>
  cols_label(repo_host = "Host", total = "Total") |>
  cols_merge_n_pct(total, p_total) |>
  fmt_percent(p_total) |>
  tab_spanner("By category", Guides:`Standalone software`)
```

Where applicable, we obtained more detailed information about each repository's contents and contribution histories from the GitHub API using the R package `gh` [@csardi2023].
This included metadata on the GitHub repository and the programming languages it uses, as well as detailed data on each repository's individual contributors, commits, issues and comments (see @tbl-glossary for a glossary of git/GitHub terminology used in this paper).
We opted to only collect repository data from GitHub because it is the most popular forge platform used by open-archaeo projects (@tbl-forges).
This means that projects that do not use version control (`r percent(p_no_vc)` of the total), or host it elsewhere (`r percent(p_no_github)` of the total), are excluded from these parts of the analysis, though we were still able to perform an analysis of their contents and authorship from the data included in open-archaeo itself.

<!-- TODO: add something on EDA and network analysis methodology -->

The data and analysis code are available in our research compendium on GitHub, which is also indexed on Zenodo. <!-- TODO: add hyperlinks to these resources -->
