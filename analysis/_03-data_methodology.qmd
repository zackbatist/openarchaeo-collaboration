# Data and methodology {#sec-data-methodology}

```{r data-oarch}
# open-archaeo version 2024-02-06
# https://doi.org/10.5281/zenodo.10625236
oarch <- read_csv(here("analysis/data/raw_data/open-archaeo_2024-02-06.csv"))

# Extract clean repos from GitHub URLs
oarch <- mutate(
  oarch,
  gh_repo = str_match(oarch$github, "^https://github.com/([\\w-\\.]+/[\\w-\\.]+)/?.*?$")[,2]
)
```

We present an exploratory quantitative analysis of open-archaeo [open-archaeo.info, @batist2023], a directory of `r nrow(oarch)` pieces of open source archaeological software and other digital resources maintained primarily by one of us (ZB) since 2018.

We compiled the dataset by browsing collaborative software development platforms, relying heavily on their social networking features.
More specifically, we update open-archaeo by manually crawling through archaeologists' profiles on these platforms, as well as on other personal, professional, and institutional websites that describe and host additional archaeological software.
We supplement this quasi-systematic collection strategy with word-of-mouth contributions made by interested individuals who identified relevant work that we initially overlooked.

```{r data-oarch-filter}
# Exclude from GitHub API data collection because they part of a larger
# repository (or forked from one)
oarch$gh_repo[oarch$item_name == "ArchaeoLines"] <- NA
oarch$gh_repo[oarch$gh_repo == "carpentries-incubator/R-archaeology-lesson"] <- NA
```

Open-archaeo is a relatively comprehensive list.
While our initial intention was to only list open source software, its scope has expanded to include all software created by and for archaeologists.
Apart from regular updates by its primary maintainer (ZB), it has been expanded by a wider network of contributors and has benefited from the wider range of domain specialisms this has brought.
However, open-archaeo generally lacks software written before archaeologists started using collaborative software development platforms such as GitHub, and software that is not shared on the web at all.
It also includes numerous non-software resources, as well as software developed and distributed without the use of software forges.
The dataset is also limited by the experiences of its primary maintainers.^[We welcome anyone, especially domain specialists who are familiar with the kinds of tools commonly used in their specific fields, to help fill in these gaps. Instructions for contributing to open-archaeo can be found at <https://github.com/zackbatist/open-archaeo>.]

```{r data-github}
# If cached data at `analysis/data/derived_data/oarch.RData` is present, this
# chunk will prefer to load it rather than make requests to the GitHub API.
# Delete this file to fetch fresh data from the GitHub or modify 
# `cached_gh_data` to read a different cached version.
#
# Note that fetching data from the GitHub API takes some time and is subject to
# a rate limit:
# <https://docs.github.com/en/rest/overview/resources-in-the-rest-api#rate-limiting>
#
# You will need to authenticate authenticate with GitHub credentials to get a
# rate limit sufficient to obtain the required data, see 
# <https://gh.r-lib.org/articles/managing-personal-access-tokens.html>
# for options on how to do this.
cached_gh_data <- here("analysis/data/derived_data/oarch.RData")
if (!file_exists(cached_gh_data)) {
  oarch$gh_repo_info <- map(oarch$gh_repo, gh_repo_info, .progress = TRUE)
  oarch$gh_langs <- map(oarch$gh_repo, gh_lang, .progress = TRUE)
  oarch$gh_contribs <- map(oarch$gh_repo, gh_contrib, .progress = TRUE)
  oarch$gh_issues <- map(oarch$gh_repo, gh_issue, .progress = TRUE)
  oarch$gh_comments <- map(oarch$gh_repo, gh_comment, .progress = TRUE)
  oarch$gh_commits <- map(oarch$gh_repo, gh_commit, .progress = TRUE)
  saveRDS(oarch, cached_gh_data)
  # TODO: save as CSVs too
}
oarch <- readRDS(cached_gh_data)

n_repos <- n_filter(oarch, !is.na(gh_repo))
n_commits <- oarch |> drop_na(gh_repo) |> unnest(gh_commits) |> nrow()
n_issues <- oarch |> drop_na(gh_repo) |> unnest(gh_issues) |> nrow()
n_comments <- oarch |> drop_na(gh_repo) |> unnest(gh_comments) |> nrow()
n_contributors <- oarch |> drop_na(gh_repo) |> unnest(gh_contribs) |> 
  distinct(contributor) |> nrow()
```

```{r data-oarch-forges}
oarch_forges <- oarch |>
  mutate(none = ifelse(is.na(github) & is.na(gitlab) & is.na(bitbucket) &
                         is.na(launchpad) & is.na(codeberg), "", NA)) |>
  pivot_longer(c(github, gitlab, bitbucket, launchpad, codeberg, none),
               names_to = "repo_host", values_to = "repo_url") |>
  drop_na(repo_url) |>
  count(repo_host) |>
  mutate(p = n / sum(n)) |>
  arrange(repo_host == "none", desc(n)) |>
  mutate(repo_host = recode(repo_host,
                            github = "GitHub",
                            codeberg = "Codeberg",
                            gitlab = "GitLab",
                            bitbucket = "BitBucket",
                            launchpad = "Launchpad",
                            none = "None"))

p_no_vc <- filter(oarch_forges, repo_host == "None")$p
p_no_github <- sum(filter(oarch_forges, repo_host != "None" & repo_host != "GitHub")$p)
```

```{r tbl-forges}
#| tbl-cap: Software forges used by open archaeology projects
oarch_forges |>
  mutate(
    repo_host = recode(
      repo_host,
      "GitHub" = "[GitHub](https://github.com/)",
      "Codeberg" = "[Codeberg](https://codeberg.org/)",
      "GitLab" = "[GitLab](https://about.gitlab.com/)",
      "BitBucket" = "[Bitbucket](https://bitbucket.org/product/)",
      "Launchpad" = "[Launchpad](https://launchpad.net/)"
    ),
    p = paste0(format(p * 100, trim = TRUE, digits = 1), "%")
  ) |>
  rename(Host = repo_host, `%` = p) |>
  tt() |>
  format_tt(1, markdown = TRUE)
```

Where applicable, we obtained more detailed information about each repository's contents and contribution histories from the GitHub API (application programming interface).
Our analysis incorporates data on `r n_repos` repositories^[We excluded three GitHub repositories from the analysis for technical reasons. For example, https://github.com/carpentries-incubator/R-archaeology-lesson is a repository within the scope of open-archaeo, but it was forked from a pre-existing repository that is not (https://github.com/datacarpentry/R-ecology-lesson) and thus includes in its commit history irrelevant data from the parent repository.], comprising `r n_commits` commits, `r n_issues` issues/pull requests, and `r n_comments` from `r n_contributors` distinct users, as well as repository metadata on programming languages used, licensing, stars and forks, and so on.

We opted to only collect repository data from GitHub because it is the most popular forge platform used by open-archaeo projects (@tbl-forges).
This means that projects that do not use version control (`r percent(p_no_vc)` of the total), or which develop and host code on platforms other than GitHub (`r percent(p_no_github)` of the total), were excluded from parts of the analysis that examine *how* archaelogists develop software.
However, we were still able to draw from all records to ascertain the general composition of open-archaeo, and by extension, to address *what* kinds of software and resources archaeologists make.

That being said, we cannot account for practices that occur through offline or private channels, or forms of collaboration we do not know about. 
We did not directly observe or interview archaeological software developers, though our conclusions do draw heavily from our experience as members of that community ourselves. 
Our earliest data is from 2005 and our study can say little about collaborative software development in archaeology before this point, though we know there was a significant amount of it [@ducke2013; @whallon1972].

These caveats notwithstanding, the open-archaeo directory and the supplemental data from the GitHub API provide a rich resource to explore the nature of collaborative software engineering in archaeology.
Here we employ exploratory data analysis [*sensu* @tukey1977] to identify and describe overall patterns visible in this rich dataset.
In @sec-open-archaeology, our focus is on examining the general state of open source archaeological software and resource development.
In @sec-collaboration, we refine our analysis to examine development processes, with specific focus on collaborative experiences.
Finally, in @sec-network, we apply network analysis methods to investigate the formation of broader collaborative communities.
Our analyses combine to support our objectives of understanding what kinds of software and resources archaeologists are making, and how they create these tools in response to specific needs and use-cases, as afforded by offline social and professional connections, and within the context of an emerging community of practice.

The quantitative analyses and figures presented here were generated with `r version$version.string` [@rcoreteam2023].
The full data and code is available in the compendium that accompanies this paper [@roe2024].
