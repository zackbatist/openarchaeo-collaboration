# Data and methodology {#sec-data-methodology}

```{r data-oarch}
# open-archaeo version 2024-02-02
# https://doi.org/10.5281/zenodo.10611198
oarch <- read_csv(here("analysis/data/raw_data/open-archaeo_2024-02-02.csv"))

# Extract clean repos from GitHub URLs
oarch <- mutate(
  oarch,
  gh_repo = str_match(oarch$github, "^https://github.com/([\\w-\\.]+/[\\w-\\.]+)/?.*?$")[,2]
)
```

We present an exploratory analysis of open-archaeo [[open-archaeo.info](open-archaeo.info), @batist2023], a directory of `r nrow(oarch)` pieces of open source archaeological software and other digital resources.


```{r tbl-glossary}
#| tbl-cap: Glossary of git and GitHub terminology
tribble(
  ~term, ~definition,
  "Comment", "On GitHub, text post attached to an issue, including the first one that describes the issue",
  "Commit", "Set of changes (addition, alteration, or deletion) to files in a repository that has been recorded by git as one entry in its log",
  "Commit access", "Ability to make changes to a repository directly, without making a pull request",
  "Contributor", "User that has made at least one commit to a specified repository",
  "Follow", "Add activity by another user to a user's timeline",
  "Forge", "Web-based platform for hosting, distributing and facilitating collaboration on version controlled computer code, e.g. GitHub, GitLab, Codeberg",
  "Fork", "Copy of a repository owned by another user; forking is a prerequisite to making a pull request",
  "git", "Open source version control software",
  "GitHub", "Commercial platform that freely hosts git repositories and provides extended collaboration and social networking features, such as pull requests, issues and stars",
  "GitLab", "Open source alternative to GitHub",
  "CodeBerg", "Open source alternative to GitHub",
  "Issue", "Feature of GitHub that records and tracks a bug report, feature request or other suggestion in a repository",
  "Maintainer", "Individual that has overall control of a repository, generally assumed to be its primary contributor. Repositories can have multiple users with commit access in addition to the maintainer.",
  "Merge", "Accept a pull request and incorporate its changes into a repository.",
  "Organization", "Entity representing a group of users, which can also own repositories",
  "Pull request", "Mechanism by which users that don't have commit access to a repository can contribute to it. The repository's maintainer or another user with commit access must decide whether to merge (accept) the changes, or decline them.",
  "Repository", "Individual project that uses git for version control. Can include a mix of different types of files.",
  "Star", "GitHub's version of a 'like', applied by users to a repository.",
  "Timeline", "Chronological feed of GitHub activity from repositories a user has starred and other users they follow. Also includes repositories that a user is not following if they are 'trending' or determined relevant by GitHub's algorithm.",
  "User", "On GitHub, an individual with an account that can own repositories",
  "Version control", "System for tracking changes (additions, alterations, or deletions) in a set of files, typically but not exclusively computer code"
) |>
  rename_with(tools::toTitleCase) |>
  tt() |>
  format_tt(2, markdown = TRUE) |>
  style_tt(j = 1, italic = TRUE)
```

We compiled the dataset by browsing collaborative software development platforms such as GitHub, GitLab and Codeberg, which are designed to facilitate open source software development by hosting public git repositories.
Git is a protocol designed to facilitate open and distributed contributions to a common code base.
It operates by providing mechanisms for synchronizing communal, web-based public repositories with local iterations stored on contributors' private workstations.
Contributors who volunteer or are assigned to develop, inspect, or revise a specific aspect of a code base download a copy of the public repository into their own work environment, create a fork in which they apply their modifications, and then request that their fork be merged into the central code base.
After a public repository's maintainers decide to merge the proposed changes into the communal code base, other developers may use git to download these changes while keeping their own independent forks intact.

Git is also designed to facilitate code review and version control.
All modifications are tracked as "diffs", which highlight additions or deletions to the code base, including changes within individual files.
Typically, a contributor will group a series of changes into a more comprehensive "commit" based on a specific task or part of a workflow.
Commits are always accompanied by a message, in which the contributor (ideally) describes the reason and context for the changes included in the commit.
Moreover, git assigns each commit a unique identifier and identifies the contributor by name and email address to ensure some degree of public accountability.

In addition to serving as hosting providers for public git repositories, platforms like GitHub, GitLab and Codeberg support common software developer and project management practices, such as issue and bug tracking, code-commenting, task management, identity and permissions management, web publishing, vulnerability detection, creation and maintenance of metadata, and financial sponsorship.
They also implement standard social media functions, like the ability to follow projects and individual users to receive updates on their activities, "star" certain repositories as favourites, and maintain a public-facing profile that includes personally-identifying information (e.g. profile picture, username, real name, employer or affiliation), references to all public activity on the platform, and links to the user's other social media profiles.
Code-sharing platforms thus serve as comprehensive developer portfolios and community networking resources.
However, these additional features are meant to complement and enhance the experience of contributing to open source projects, but are not actually part of the git protocol.
See @tbl-glossary for a glossary of terminology used to describe many of these concepts and features, and which we use throughout this paper.

We rely heavily on the social networking features provided by GitHub, GitLab and Codeberg to maintain open-archaeo.
More specifically, we update open-archaeo by manually crawling through archaeologists' profiles on these platforms, as well as on other personal, professional, and institutional websites that describe and host additional archaeological software.
We supplement this quasi-systematic collection strategy with word-of-mouth contributions made by interested individuals who identified relevant work that we initially overlooked.

```{r data-oarch-filter}
oarch_filter <- read_csv(here("analysis/data/raw_data/open-archaeo_filter.csv"))
n_items_removed <- nrow(filter(oarch_filter, !item_name %in% oarch$item_name))
oarch |>
  filter(!item_name %in% oarch_filter$item_name) ->
  oarch

# Exclude from GitHub API data collection because they part of a larger
# repository (or forked from one)
oarch$gh_repo[oarch$item_name == "ArchaeoLines"] <- NA
oarch$gh_repo[oarch$gh_repo == "carpentries-incubator/R-archaeology-lesson"] <- NA
```

Open-archaeo is a relatively comprehensive list.
While our initial intention was to only list open source software, its scope has expanded to include all software created by and for archaeologists.
Apart from regular updates by its primary maintainer (ZB), it has been expanded by a wider network of contributors and has benefited from the wider range of domain specialisms this has brought.
However, open-archaeo generally lacks software written before archaeologists started using collaborative software development platforms such as GitHub, and software that is not shared on the web at all.
The dataset is also limited by the experiences of its primary maintainers.
We welcome anyone, especially domain specialists who are familiar with the kinds of tools commonly used in their specific fields, to help fill in these gaps.

We excluded `r n_items_removed` records from open-archaeo from this analysis because they did not fit our "made by archaeologists, for archaeologists" criteria.

```{r data-github}
# If cached data at `analysis/data/derived_data/oarch.RData` is present, this
# chunk will prefer to load it rather than make requests to the GitHub API.
# Delete this file to fetch fresh data from the GitHub or modify 
# `cached_gh_data` to read a different cached version.
#
# Note that fetching data from the GitHub API takes some time and is subject to
# a rate limit:
# <https://docs.github.com/en/rest/overview/resources-in-the-rest-api#rate-limiting>
#
# You will need to authenticate authenticate with GitHub credentials to get a
# rate limit sufficient to obtain the required data, see 
# <https://gh.r-lib.org/articles/managing-personal-access-tokens.html>
# for options on how to do this.
cached_gh_data <- here("analysis/data/derived_data/oarch.RData")
if (!file_exists(cached_gh_data)) {
  oarch$gh_repo_info <- map(oarch$gh_repo, gh_repo_info, .progress = TRUE)
  oarch$gh_langs <- map(oarch$gh_repo, gh_lang, .progress = TRUE)
  oarch$gh_contribs <- map(oarch$gh_repo, gh_contrib, .progress = TRUE)
  oarch$gh_issues <- map(oarch$gh_repo, gh_issue, .progress = TRUE)
  oarch$gh_comments <- map(oarch$gh_repo, gh_comment, .progress = TRUE)
  oarch$gh_commits <- map(oarch$gh_repo, gh_commit, .progress = TRUE)
  saveRDS(oarch, cached_gh_data)
}
oarch <- readRDS(cached_gh_data)

n_repos <- n_filter(oarch, !is.na(gh_repo))
n_commits <- oarch |> drop_na(gh_repo) |> unnest(gh_commits) |> nrow()
n_issues <- oarch |> drop_na(gh_repo) |> unnest(gh_issues) |> nrow()
n_comments <- oarch |> drop_na(gh_repo) |> unnest(gh_comments) |> nrow()
n_contributors <- oarch |> drop_na(gh_repo) |> unnest(gh_contribs) |> 
  distinct(contributor) |> nrow()
```

```{r data-oarch_forges}
oarch_forges <- oarch |>
  mutate(none = ifelse(is.na(github) & is.na(gitlab) & is.na(bitbucket) &
                         is.na(launchpad) & is.na(codeberg), "", NA)) |>
  pivot_longer(c(github, gitlab, bitbucket, launchpad, codeberg, none),
               names_to = "repo_host", values_to = "repo_url") |>
  drop_na(repo_url) |>
  count(repo_host) |>
  mutate(p = n / sum(n)) |>
  arrange(repo_host == "none", desc(n)) |>
  mutate(repo_host = recode(repo_host,
                            github = "GitHub",
                            codeberg = "Codeberg",
                            gitlab = "GitLab",
                            bitbucket = "BitBucket",
                            launchpad = "Launchpad",
                            none = "None"))

p_no_vc <- filter(oarch_forges, repo_host == "None")$p
p_no_github <- sum(filter(oarch_forges, repo_host != "None" & repo_host != "GitHub")$p)
```

```{r tbl-forges}
#| tbl-cap: Software forges used by open archaeology projects
oarch_forges |>
  mutate(
    repo_host = recode(
      repo_host,
      "GitHub" = "[GitHub](https://github.com/)",
      "Codeberg" = "[Codeberg](https://codeberg.org/)",
      "GitLab" = "[GitLab](https://about.gitlab.com/)",
      "BitBucket" = "[Bitbucket](https://bitbucket.org/product/)",
      "Launchpad" = "[Launchpad](https://launchpad.net/)"
    ),
    p = paste0(format(p * 100, trim = TRUE, digits = 1), "%")
  ) |>
  rename(Host = repo_host, `%` = p) |>
  tt() |>
  format_tt(1, markdown = TRUE)
```

Where applicable, we obtained more detailed information about each repository's contents and contribution histories from the GitHub API (application programming interface).
We opted to only collect repository data from GitHub because it is the most popular forge platform used by open-archaeo projects (@tbl-forges).
This means that projects that do not use version control (`r percent(p_no_vc)` of the total), or host it elsewhere (`r percent(p_no_github)` of the total), are excluded from these parts of the analysis, though we were still able to perform an analysis of their contents and authorship from the data included in open-archaeo itself.
In total, we analysed data on `r n_repos` repositories, comprising `r n_commits` commits, `r n_issues` issues/pull requests, and `r n_comments` from `r n_contributors` distinct users, as well as repository metadata on programming languages used, licensing, stars and forks, and so on.

Taken together the open-archaeo directory and the supplemental data from the GitHub API provide a rich resource to explore the nature of collaborative software engineering in archaeology.
Here we employ exploratory data analysis [@tukey1977] to identify and characterise overall trends visible in this rich dataset.
In @sec-open-archaeology, our focus is on examining the general state of open source archaeological software and resource development.
In @sec-collaboration, we refine our analysis to examine development processes, with specific focus on collaborative experiences.
Finally, in @sec-network, we apply network analysis methods to investigate the formation of broader collaborative communities.
Our analyses combine to support our objectives of understanding what kinds of software and resources archaeologists are making, and how they create these tools in response to specific needs and use-cases, as afforded by offline social and professional connections, and within the context of an emerging community of practice.

The quantitative analyses and figures presented here were generated with `r version$version.string` [@rcoreteam2023].
The full data and code is available in the compendium that accompanies this paper [@roe2023] <!-- TODO: reference should be updated to reflect the actual version number and date -->.
